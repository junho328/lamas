{"task_id": "HumanEval_23_strlen", "generation": "<?php\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen($string) {\n\n    $count = 0;\n    for ($i = 0; $i < count($string); $i++) {\n        $count++;\n    }\n    return $count;\n}\n", "prompt": "<?php\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen($string) {\n", "wholecode": "<?php\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen($string) {\n    $count = 0;\n    for ($i = 0; $i < count($string); $i++) {\n        $count++;\n    }\n    return $count;\n}\n\n// Return a string with all caps\n// >>> strtoupper(\"abc\")\n// \"ABC\"\n// >>> strtoupper(\"aBc\")\n// \"ABC\"\n// >>> strtoupper(\"AbC\")\n// \"ABC\"\nfunction strtoupper($string) {\n    $newString = \"\";\n    for ($i = 0; $i < count($string); $i++) {\n        $newString .= strtoupper($string[$i]);\n    }\n    return $newString;\n}\n\n// Return a string with all lower case\n// >>> strtolower(\"abc\")\n// \"abc\"\n// >>> strtolower(\"aBc\")\n// \"abc\"\n// >>> strtolower(\"AbC\")\n// \"abc\"\nfunction strtolower($string) {\n    $newString = \"\";\n    for ($i = 0; $i < count($string); $i++) {\n        $newString .= strtolower($string[$i]);\n    }\n    return $newString;\n}\n\n// Return whether or not $needle is present in $haystack\n// >>> strpos(\"abcd\", \"b\")\n// 1\n// >>> strpos(\"abcd\", \"e\")\n// false\n// >>> strpos(\"abcd\", \"a\")\n// 0\n// >>> strpos(\"abcd\", \"d\")\n// 3\nfunction strpos($haystack, $needle) {\n    for ($i = 0; $i < count($haystack); $i++) {\n        if ($haystack[$i] == $needle) {\n            return $i;\n        }\n    }\n    return false;\n}\n\n// Return the first $n number of characters from a string\n// >>> substr(\"abcdefg\", 0, 2)\n// \"ab\"\n// >>> substr(\"abcdefg\", 4, 2)\n// \"ef\"\n// >>> substr(\"abcdefg\", 2, 4)\n// \"cdef\"\nfunction substr($string, $start, $length) {\n    $newString = \"\";\n    for ($i = $start; $i < $start + $length; $i++) {\n        $newString .= $string[$i];\n    }\n    return $newString;\n}\n\n// Return a string with $needle removed from $haystack (if present)\n// >>> str_replace(\"abc\", \"b\", \"a deber√° ser reempl"}
{"task_id": "HumanEval_89_encrypt", "generation": "<?php\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt($s) {\n\n    $alphabet = range('a', 'z');\n    $rotated = array_slice($alphabet, 4) + array_slice($alphabet, 0, 4);\n    $rotated = array_merge($rotated, array_slice($alphabet, 16) + array_slice($alphabet, 0, 16));\n    $rotated = array_merge($rotated, array_slice($alphabet, 20) + array_slice($alphabet, 0, 20));\n    $rotated = array_merge($rotated, array_slice($alphabet, 24) + array_slice($alphabet, 0, 24));\n    $rotated = array_merge($rotated, array_slice($alphabet, 28) + array_slice($alphabet, 0, 28));\n    $rotated = array_merge($rotated, array_slice($alphabet, 32) + array_slice($alphabet, 0, 32));\n    $rotated = array_merge($rotated, array_slice($alphabet, 36) + array_slice($alphabet, 0, 36));\n    $rotated = array_merge($rotated, array_slice($alphabet, 40) + array_slice($alphabet, 0, 40));\n    $rotated = array_merge($rotated, array_slice($alphabet, 44) + array_slice($alphabet, 0, 44));\n    $rotated = array_merge($rotated, array_slice($alphabet, 48) + array_slice($alphabet, 0, 48));\n    $rotated = array_merge($rotated, array_slice($alphabet, 52) + array_slice($alphabet, 0, 52));\n    $rotated = array_merge($rotated, array_slice($alphabet, 56) + array_slice($alphabet, 0, 56));\n    $rotated = array_merge($rotated, array_slice($alphabet, 60) + array_slice($alphabet, 0, 60));\n    $rotated = array_merge($rotated, array_slice($alphabet, 64) + array_slice($alphabet, 0, 64));\n    $rotated = array_merge($rotated, array_slice($alphabet, 68) + array_slice($alphabet, 0, 68));\n    $", "prompt": "<?php\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt($s) {\n", "wholecode": "<?php\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt($s) {\n    $alphabet = range('a', 'z');\n    $rotated = array_slice($alphabet, 4) + array_slice($alphabet, 0, 4);\n    $rotated = array_merge($rotated, array_slice($alphabet, 16) + array_slice($alphabet, 0, 16));\n    $rotated = array_merge($rotated, array_slice($alphabet, 20) + array_slice($alphabet, 0, 20));\n    $rotated = array_merge($rotated, array_slice($alphabet, 24) + array_slice($alphabet, 0, 24));\n    $rotated = array_merge($rotated, array_slice($alphabet, 28) + array_slice($alphabet, 0, 28));\n    $rotated = array_merge($rotated, array_slice($alphabet, 32) + array_slice($alphabet, 0, 32));\n    $rotated = array_merge($rotated, array_slice($alphabet, 36) + array_slice($alphabet, 0, 36));\n    $rotated = array_merge($rotated, array_slice($alphabet, 40) + array_slice($alphabet, 0, 40));\n    $rotated = array_merge($rotated, array_slice($alphabet, 44) + array_slice($alphabet, 0, 44));\n    $rotated = array_merge($rotated, array_slice($alphabet, 48) + array_slice($alphabet, 0, 48));\n    $rotated = array_merge($rotated, array_slice($alphabet, 52) + array_slice($alphabet, 0, 52));\n    $rotated = array_merge($rotated, array_slice($alphabet, 56) + array_slice($alphabet, 0, 56));\n    $rotated = array_merge($rotated, array_slice($alphabet, 60) + array_slice($alphabet, 0, 60));\n    $rotated = array_merge($rotated, array_slice($alphabet, 64) + array_slice($alphabet, 0, 64));\n    $rotated = array_merge($rotated, array_slice($alphabet, 68) + array_slice($alphabet, 0, 68));\n    $"}
{"task_id": "HumanEval_95_check_dict_case", "generation": "<?php\n// Given an array, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given array is empty.\n// Examples:\n// >>> check_dict_case(array(\"a\" => \"apple\", \"b\" => \"banana\"))\n// true\n// >>> check_dict_case(array(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n// false\n// >>> check_dict_case(array(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n// false\n// >>> check_dict_case(array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n// false\n// >>> check_dict_case(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n// true\nfunction check_dict_case($dict) {\n\n    if (empty($dict)) {\n        return false;\n    }\n    $lower = true;\n    $upper = true;\n    foreach ($dict as $key => $value) {\n        if (!is_string($key)) {\n            return false;\n        }\n        if (strtolower($key) !== $key) {\n            $lower = false;\n        }\n        if (strtoupper($key) !== $key) {\n            $upper = false;\n        }\n    }\n    return $lower || $upper;\n}", "prompt": "<?php\n// Given an array, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given array is empty.\n// Examples:\n// >>> check_dict_case(array(\"a\" => \"apple\", \"b\" => \"banana\"))\n// true\n// >>> check_dict_case(array(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n// false\n// >>> check_dict_case(array(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n// false\n// >>> check_dict_case(array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n// false\n// >>> check_dict_case(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n// true\nfunction check_dict_case($dict) {\n", "wholecode": "<?php\n// Given an array, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given array is empty.\n// Examples:\n// >>> check_dict_case(array(\"a\" => \"apple\", \"b\" => \"banana\"))\n// true\n// >>> check_dict_case(array(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n// false\n// >>> check_dict_case(array(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n// false\n// >>> check_dict_case(array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n// false\n// >>> check_dict_case(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n// true\nfunction check_dict_case($dict) {\n    if (empty($dict)) {\n        return false;\n    }\n    $lower = true;\n    $upper = true;\n    foreach ($dict as $key => $value) {\n        if (!is_string($key)) {\n            return false;\n        }\n        if (strtolower($key) !== $key) {\n            $lower = false;\n        }\n        if (strtoupper($key) !== $key) {\n            $upper = false;\n        }\n    }\n    return $lower || $upper;\n}\n?>"}
{"task_id": "HumanEval_85_add", "generation": "<?php\n// Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add(array(4, 2, 6, 7))\n// 2\nfunction add($lst) {\n\n    $sum = 0;\n    foreach ($lst as $index => $value) {\n        if ($index % 2 == 1 && $value % 2 == 0) {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}", "prompt": "<?php\n// Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add(array(4, 2, 6, 7))\n// 2\nfunction add($lst) {\n", "wholecode": "<?php\n// Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add(array(4, 2, 6, 7))\n// 2\nfunction add($lst) {\n    $sum = 0;\n    foreach ($lst as $index => $value) {\n        if ($index % 2 == 1 && $value % 2 == 0) {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}\n?>"}
{"task_id": "HumanEval_140_fix_spaces", "generation": "<?php\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces($text) {\n\n    $text = str_replace(' ', '_', $text);\n    $text = preg_replace('/ {2,}/', '-', $text);\n    return $text;\n}\n", "prompt": "<?php\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces($text) {\n", "wholecode": "<?php\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces($text) {\n    $text = str_replace(' ', '_', $text);\n    $text = preg_replace('/ {2,}/', '-', $text);\n    return $text;\n}\n\n// Check function to verify the correctness of the solution\nfunction check($input, $expected) {\n    $result = fix_spaces($input);\n    if ($result === $expected) {\n        echo \"PASS: The function correctly transformed '{$input}' to '{$result}'.\\n\";\n    } else {\n        echo \"FAIL: The function transformed '{$input}' to '{$result}' but expected '{$expected}'.\\n\";\n    }\n}\n\n// Provided data points\ncheck(\" Example\", \"Example\");\ncheck(\" Example 1\", \"Example_1\");\ncheck(\" Example 2\", \"_Example_2\");\ncheck(\" Example 3\", \"_Example-3\");\n?>"}
{"task_id": "HumanEval_63_fibfib", "generation": "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib($n) {\n\n    if ($n == 0 || $n == 1) {\n        return 0;\n    } elseif ($n == 2) {\n        return 1;\n    } else {\n        $fibfib = [0, 0, 1];\n        for ($i = 3; $i <= $n; $i++) {\n            $fibfib[$i % 3] = $fibfib[0] + $fibfib[1] + $fibfib[2];\n        }\n        return $fibfib[$n % 3];\n    }\n}\n", "prompt": "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib($n) {\n", "wholecode": "<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib($n) {\n    if ($n == 0 || $n == 1) {\n        return 0;\n    } elseif ($n == 2) {\n        return 1;\n    } else {\n        $fibfib = [0, 0, 1];\n        for ($i = 3; $i <= $n; $i++) {\n            $fibfib[$i % 3] = $fibfib[0] + $fibfib[1] + $fibfib[2];\n        }\n        return $fibfib[$n % 3];\n    }\n}\n\n// Test cases\necho fibfib(1) . \"\\n\"; // Output: 0\necho fibfib(5) . \"\\n\"; // Output: 4\necho fibfib(8) . \"\\n\"; // Output: 24\n?>"}
{"task_id": "HumanEval_151_double_the_difference", "generation": "<?php\n// Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference(array(1, 3, 2, 0))\n// 10\n// >>> double_the_difference(array(-1, -2, 0))\n// 0\n// >>> double_the_difference(array(9, -2))\n// 81\n// >>> double_the_difference(array(0))\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference($lst) {\n\n    $sum = 0;\n    foreach ($lst as $num) {\n        if ($num > 0 && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n", "prompt": "<?php\n// Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference(array(1, 3, 2, 0))\n// 10\n// >>> double_the_difference(array(-1, -2, 0))\n// 0\n// >>> double_the_difference(array(9, -2))\n// 81\n// >>> double_the_difference(array(0))\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference($lst) {\n", "wholecode": "<?php\n// Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference(array(1, 3, 2, 0))\n// 10\n// >>> double_the_difference(array(-1, -2, 0))\n// 0\n// >>> double_the_difference(array(9, -2))\n// 81\n// >>> double_the_difference(array(0))\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference($lst) {\n    $sum = 0;\n    foreach ($lst as $num) {\n        if ($num > 0 && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($input, $expected) {\n    $output = double_the_difference($input);\n    if ($output === $expected) {\n        echo \"PASS: The function correctly returned $output for input \" . json_encode($input) . \".\\n\";\n    } else {\n        echo \"FAIL: The function returned $output for input \" . json_encode($input) . \", but expected $expected.\\n\";\n    }\n}\n\n// Provided data points\ncheck(array(1, 3, 2, 0), 10);\ncheck(array(-1, -2, 0), 0);\ncheck(array(9, -2), 81);\ncheck(array(0), 0);\ncheck(array(), 0);\n?>"}
{"task_id": "HumanEval_22_filter_integers", "generation": "<?php\n// Filter given array of any phpthon values only for integers\n// >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1, 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values) {\n\n    $integers = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n", "prompt": "<?php\n// Filter given array of any phpthon values only for integers\n// >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1, 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values) {\n", "wholecode": "<?php\n// Filter given array of any phpthon values only for integers\n// >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1, 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values) {\n    $integers = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n            $integers[] = $value;\n        }\n    }\n    return $integers;\n}\n\n// Filter given array of any phpthon values only for strings\n// >>> filter_strings(array(\"abc\", 123, \"def\"))\n// array(\"abc\", \"def\")\n// >>> filter_strings(array(\"abc\", array(), \"def\", 456))\n// array(\"abc\", \"def\")\nfunction filter_strings($values) {\n    $strings = array();\n    foreach ($values as $value) {\n        if (is_string($value)) {\n            $strings[] = $value;\n        }\n    }\n    return $strings;\n}\n\n// Filter given array of any phpthon values only for arrays\n// >>> filter_arrays(array(array(), \"abc\", array(1, 2, 3), 42))\n// array(array(), array(1, 2, 3))\n// >>> filter_arrays(array(\"abc\", 123, 456))\n// array()\nfunction filter_arrays($values) {\n    $arrays = array();\n    foreach ($values as $value) {\n        if (is_array($value)) {\n            $arrays[] = $value;\n        }\n    }\n    return $arrays;\n}\n\n// Filter given array of any phpthon values only for floats\n// >>> filter_floats(array(1.1, 2, \"3\", 4.4))\n// array(1.1, 4.4)\n// >>> filter_floats(array(\"abc\", 123, 456))\n// array()\nfunction filter_floats($values) {\n    $floats = array();\n    foreach ($values as $value) {\n        if (is_float($value)) {\n            $floats[] = $value;\n        }\n    }\n    return $floats;\n}\n\n// Filter given array of any phpthon values only for booleans\n// >>> filter_booleans(array(true, false, \"abc\", 123))\n// array(true, false)\n// >>> filter_booleans(array(1, 2, 3))\n// array()\nfunction filter_booleans($values) {\n    $booleans = array();\n    foreach ($values as $value) {\n        if (is_bool($value)) {\n            $booleans[] = $value;\n        }\n"}
{"task_id": "HumanEval_41_car_race_collision", "generation": "<?php\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision($n) {\n\n    return $n * $n;\n}", "prompt": "<?php\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision($n) {\n", "wholecode": "<?php\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision($n) {\n    return $n * $n;\n}"}
{"task_id": "HumanEval_17_parse_music", "generation": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n\n    $notes = explode(\" \", $music_string);\n    $beats = array();\n    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n                $beats[] = 4;\n                break;\n            case 'o|':\n                $beats[] = 2;\n                break;\n            case '.|':\n                $beats[] = 1;\n                break;\n        }\n    }\n    return $beats;\n}\n", "prompt": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n", "wholecode": "<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $notes = explode(\" \", $music_string);\n    $beats = array();\n    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n                $beats[] = 4;\n                break;\n            case 'o|':\n                $beats[] = 2;\n                break;\n            case '.|':\n                $beats[] = 1;\n                break;\n        }\n    }\n    return $beats;\n}\n\n// Example check\nfunction check() {\n    $test_cases = array(\n        \"o o| .| o| o| .| .| .| .| o o\" => array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4),\n        \"o o| o| .| .| .| .| .| .| .| .|\" => array(4, 2, 2, 1, 1, 1, 1, 1, 1, 1),\n        \"o| o| o| o|\" => array(2, 2, 2, 2)\n    );\n    foreach ($test_cases as $input => $expected) {\n        $result = parse_music($input);\n        if ($result === $expected) {\n            echo \"Test passed for input '$input'.\\n\";\n        } else {\n            echo \"Test failed for input '$input'. Expected \" . implode(\", \", $expected) . \" but got \" . implode(\", \", $result) . \".\\n\";\n        }\n    }\n}\n\ncheck();\n?>"}
{"task_id": "HumanEval_79_decimal_to_binary", "generation": "<?php\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary($decimal) {\n\n    $binary = decbin($decimal);\n    return \"db\" . $binary . \"db\";\n}\n", "prompt": "<?php\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary($decimal) {\n", "wholecode": "<?php\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"db\" . $binary . \"db\";\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($input, $expected) {\n    $result = decimal_to_binary($input);\n    if ($result === $expected) {\n        echo \"PASS: The binary representation of {$input} is {$result}.\\n\";\n    } else {\n        echo \"FAIL: The binary representation of {$input} is {$result}, but expected {$expected}.\\n\";\n    }\n}\n\n// Provided data points\ncheck(15, \"db1111db\");\ncheck(32, \"db100000db\");\ncheck(0, \"db0db\");\ncheck(1, \"db1db\");\ncheck(255, \"db11111111db\");\n?>"}
{"task_id": "HumanEval_14_all_prefixes", "generation": "<?php\n// Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// array(\"a\", \"ab\", \"abc\")\nfunction all_prefixes($string) {\n\n    $prefixes = array();\n    for ($i = 1; $i <= strlen($string); $i++) {\n        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n}\n", "prompt": "<?php\n// Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// array(\"a\", \"ab\", \"abc\")\nfunction all_prefixes($string) {\n", "wholecode": "<?php\n// Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// array(\"a\", \"ab\", \"abc\")\nfunction all_prefixes($string) {\n    $prefixes = array();\n    for ($i = 1; $i <= strlen($string); $i++) {\n        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n}\n\n// Check if a string is a palindrome\n// >>> is_palindrome(\"racecar\")\n// true\n// >>> is_palindrome(\"hello\")\n// false\nfunction is_palindrome($string) {\n    return $string === strrev($string);\n}\n\n// Return the longest palindrome prefix of the input string\n// >>> longest_palindrome_prefix(\"racecar\")\n// \"racecar\"\n// >>> longest_palindrome_prefix(\"hello\")\n// \"h\"\nfunction longest_palindrome_prefix($string) {\n    $prefixes = all_prefixes($string);\n    $longest_palindrome = \"\";\n    foreach ($prefixes as $prefix) {\n        if (is_palindrome($prefix) && strlen($prefix) > strlen($longest_palindrome)) {\n            $longest_palindrome = $prefix;\n        }\n    }\n    return $longest_palindrome;\n}\n\n// Main function to test the generated function\nfunction main() {\n    $testCases = array(\n        \"racecar\" => \"racecar\",\n        \"hello\" => \"h\",\n        \"abba\" => \"abba\",\n        \"a\" => \"a\",\n        \"\" => \"\"\n    );\n\n    foreach ($testCases as $input => $expected) {\n        $result = longest_palindrome_prefix($input);\n        assert($result === $expected, \"Failed for input: $input\");\n        echo \"Passed for input: $input\\n\";\n    }\n}\n\nmain();\n?>"}
{"task_id": "HumanEval_53_add", "generation": "<?php\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add($x, $y) {\n\n    return $x + $y;\n}\n", "prompt": "<?php\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add($x, $y) {\n", "wholecode": "<?php\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add($x, $y) {\n    return $x + $y;\n}\n\n// Subtract two numbers x and y\n// >>> subtract(2, 3)\n// -1\n// >>> subtract(5, 7)\n// -2\nfunction subtract($x, $y) {\n    return $x - $y;\n}\n\n// Multiply two numbers x and y\n// >>> multiply(2, 3)\n// 6\n// >>> multiply(5, 7)\n// 35\nfunction multiply($x, $y) {\n    return $x * $y;\n}\n\n// Divide two numbers x and y\n// >>> divide(2, 3)\n// 0.66666666666667\n// >>> divide(5, 7)\n// 0.71428571428571\nfunction divide($x, $y) {\n    return $x / $y;\n}\n\n// Check if a number is even\n// >>> is_even(2)\n// true\n// >>> is_even(3)\n// false\nfunction is_even($x) {\n    return $x % 2 == 0;\n}\n\n// Check if a number is odd\n// >>> is_odd(2)\n// false\n// >>> is_odd(3)\n// true\nfunction is_odd($x) {\n    return $x % 2 != 0;\n}\n\n// Check if a number is prime\n// >>> is_prime(2)\n// true\n// >>> is_prime(3)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(5)\n// true\n// >>> is_prime(6)\n// false\n// >>> is_prime(7)\n// true\n// >>> is_prime(8)\n// false\n// >>> is_prime(9)\n// false\n// >>> is_prime(10)\n// false\n// >>> is_prime(11)\n// true\n// >>> is_prime(12)\n// false\n// >>> is_prime(13)\n// true\n// >>> is_prime(14)\n// false\n// >>> is_prime(15)\n// false\n// >>> is_prime(16)\n// false\n// >>> is_prime(17)\n// true\n// >>> is_prime(18)\n// false\n// >>> is_prime(19)\n// true\n// >>> is_prime(20)\n// false\n//"}
{"task_id": "HumanEval_159_eat", "generation": "<?php\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// array(11, 4)\n// >>> eat(4, 8, 9)\n// array(12, 1)\n// >>> eat(1, 10, 10)\n// array(11, 0)\n// >>> eat(2, 11, 5)\n// array(7, 0)\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat($number, $need, $remaining) {\n\n    $total = $number + $need;\n    $left = $remaining - $need;\n    if ($left < 0) {\n        $left = 0;\n    }\n    return array($total, $left);\n}", "prompt": "<?php\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// array(11, 4)\n// >>> eat(4, 8, 9)\n// array(12, 1)\n// >>> eat(1, 10, 10)\n// array(11, 0)\n// >>> eat(2, 11, 5)\n// array(7, 0)\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat($number, $need, $remaining) {\n", "wholecode": "<?php\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// array(11, 4)\n// >>> eat(4, 8, 9)\n// array(12, 1)\n// >>> eat(1, 10, 10)\n// array(11, 0)\n// >>> eat(2, 11, 5)\n// array(7, 0)\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat($number, $need, $remaining) {\n    $total = $number + $need;\n    $left = $remaining - $need;\n    if ($left < 0) {\n        $left = 0;\n    }\n    return array($total, $left);\n}"}
{"task_id": "HumanEval_115_max_fill", "generation": "<?php\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1)\n// 6\n// Example 2:\n// >>> max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)\n// 5\n// Example 3:\n// >>> max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $buckets = array_fill(0, $rows, $capacity);\n    $total = 0;\n    for ($i = 0; $i < $cols; $i++) {\n        for ($j = 0; $j < $rows; $j++) {\n            if ($grid[$j][$i] == 1) {\n                if ($buckets[$j] == 0) {\n                    $total++;\n                    $buckets[$j] = $capacity;\n                }\n                $buckets[$j]--;\n            }\n        }\n    }\n    return $total;\n}", "prompt": "<?php\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1)\n// 6\n// Example 2:\n// >>> max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)\n// 5\n// Example 3:\n// >>> max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n", "wholecode": "<?php\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1)\n// 6\n// Example 2:\n// >>> max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)\n// 5\n// Example 3:\n// >>> max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $buckets = array_fill(0, $rows, $capacity);\n    $total = 0;\n    for ($i = 0; $i < $cols; $i++) {\n        for ($j = 0; $j < $rows; $j++) {\n            if ($grid[$j][$i] == 1) {\n                if ($buckets[$j] == 0) {\n                    $total++;\n                    $buckets[$j] = $capacity;\n                }\n                $buckets[$j]--;\n            }\n        }\n    }\n    return $total;\n}\n?>"}
{"task_id": "HumanEval_160_do_algebra", "generation": "<?php\n// Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra($operator, $operand) {\n\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n            case '+':\n                $result += $operand[$i + 1];\n                break;\n            case '-':\n                $result -= $operand[$i + 1];\n                break;\n            case '*':\n                $result *= $operand[$i + 1];\n                break;\n            case '/':\n                $result /= $operand[$i + 1];\n                break;\n            case '**':\n                $result **= $operand[$i + 1];\n                break;\n        }\n    }\n    return $result;\n}", "prompt": "<?php\n// Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra($operator, $operand) {\n", "wholecode": "<?php\n// Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n            case '+':\n                $result += $operand[$i + 1];\n                break;\n            case '-':\n                $result -= $operand[$i + 1];\n                break;\n            case '*':\n                $result *= $operand[$i + 1];\n                break;\n            case '/':\n                $result /= $operand[$i + 1];\n                break;\n            case '**':\n                $result **= $operand[$i + 1];\n                break;\n        }\n    }\n    return $result;\n}"}
{"task_id": "HumanEval_27_flip_case", "generation": "<?php\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string) {\n\n    $flipped = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (ctype_lower($char)) {\n            $flipped .= strtoupper($char);\n        } elseif (ctype_upper($char)) {\n            $flipped .= strtolower($char);\n        } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n}\n", "prompt": "<?php\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string) {\n", "wholecode": "<?php\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string) {\n    $flipped = '';\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = $string[$i];\n        if (ctype_lower($char)) {\n            $flipped .= strtoupper($char);\n        } elseif (ctype_upper($char)) {\n            $flipped .= strtolower($char);\n        } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n}\n\n// Main function to test the generated function\nfunction main() {\n    $testCases = array(\n        \"Hello\" => \"hELLO\",\n        \"Python3.8\" => \"pYTHON3.8\",\n        \"12345\" => \"12345\",\n        \"aBcDeF\" => \"AbCdEf\"\n    );\n\n    foreach ($testCases as $input => $expectedOutput) {\n        $output = flip_case($input);\n        if ($output === $expectedOutput) {\n            echo \"PASS: flip_case('{$input}') returned '{$output}'\\n\";\n        } else {\n            echo \"FAIL: flip_case('{$input}') returned '{$output}' instead of '{$expectedOutput}'\\n\";\n        }\n    }\n}\n\n// Run the main function to test the flip_case function\nmain();\n?>"}
{"task_id": "HumanEval_105_by_length", "generation": "<?php\n// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n// >>> by_length(array())\n// array()\n// If the array has any strange number ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction by_length($arr) {\n\n    $result = array();\n    foreach ($arr as $value) {\n        if ($value >= 1 && $value <= 9) {\n            $result[] = $value;\n        }\n    }\n    rsort($result);\n    $names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    $result = array_map(function($value) use ($names) {\n        return $names[$value - 1];\n    }, $result);\n    return $result;\n}", "prompt": "<?php\n// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n// >>> by_length(array())\n// array()\n// If the array has any strange number ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction by_length($arr) {\n", "wholecode": "<?php\n// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n// >>> by_length(array())\n// array()\n// If the array has any strange number ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction by_length($arr) {\n    $result = array();\n    foreach ($arr as $value) {\n        if ($value >= 1 && $value <= 9) {\n            $result[] = $value;\n        }\n    }\n    rsort($result);\n    $names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    $result = array_map(function($value) use ($names) {\n        return $names[$value - 1];\n    }, $result);\n    return $result;\n}\n?>"}
{"task_id": "HumanEval_25_factorize", "generation": "<?php\n// Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n// array(2, 5, 7)\nfunction factorize($n) {\n\n    $factors = [];\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i++;\n        } else {\n            $n /= $i;\n            $factors[] = $i;\n        }\n    }\n    if ($n > 1) {\n        $factors[] = $n;\n    }\n    return $factors;\n}\n", "prompt": "<?php\n// Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n// array(2, 5, 7)\nfunction factorize($n) {\n", "wholecode": "<?php\n// Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n// array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i++;\n        } else {\n            $n /= $i;\n            $factors[] = $i;\n        }\n    }\n    if ($n > 1) {\n        $factors[] = $n;\n    }\n    return $factors;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($input, $expected) {\n    $result = factorize($input);\n    if ($result === $expected) {\n        echo \"Test passed for input $input. Output: \" . implode(', ', $result) . \"\\n\";\n    } else {\n        echo \"Test failed for input $input. Expected: \" . implode(', ', $expected) . \" but got: \" . implode(', ', $result) . \"\\n\";\n    }\n}\n\n// Provided data points\ncheck(8, [2, 2, 2]);\ncheck(25, [5, 5]);\ncheck(70, [2, 5, 7]);\n?>"}
{"task_id": "HumanEval_96_count_up_to", "generation": "<?php\n// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// array(2, 3)\n// >>> count_up_to(11)\n// array(2, 3, 5, 7)\n// >>> count_up_to(0)\n// array()\n// >>> count_up_to(20)\n// array(2, 3, 5, 7, 11, 13, 17, 19)\n// >>> count_up_to(1)\n// array()\n// >>> count_up_to(18)\n// array(2, 3, 5, 7, 11, 13, 17)\nfunction count_up_to($n) {\n\n    $primes = array();\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i)) {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n", "prompt": "<?php\n// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// array(2, 3)\n// >>> count_up_to(11)\n// array(2, 3, 5, 7)\n// >>> count_up_to(0)\n// array()\n// >>> count_up_to(20)\n// array(2, 3, 5, 7, 11, 13, 17, 19)\n// >>> count_up_to(1)\n// array()\n// >>> count_up_to(18)\n// array(2, 3, 5, 7, 11, 13, 17)\nfunction count_up_to($n) {\n", "wholecode": "<?php\n// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// array(2, 3)\n// >>> count_up_to(11)\n// array(2, 3, 5, 7)\n// >>> count_up_to(0)\n// array()\n// >>> count_up_to(20)\n// array(2, 3, 5, 7, 11, 13, 17, 19)\n// >>> count_up_to(1)\n// array()\n// >>> count_up_to(18)\n// array(2, 3, 5, 7, 11, 13, 17)\nfunction count_up_to($n) {\n    $primes = array();\n    for ($i = 2; $i < $n; $i++) {\n        if (is_prime($i)) {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n\nfunction is_prime($n) {\n    if ($n < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\necho \"count_up_to(5): \";\nprint_r(count_up_to(5)); // array(2, 3)\necho \"count_up_to(11): \";\nprint_r(count_up_to(11)); // array(2, 3, 5, 7)\necho \"count_up_to(0): \";\nprint_r(count_up_to(0)); // array()\necho \"count_up_to(20): \";\nprint_r(count_up_to(20)); // array(2, 3, 5, 7, 11, 13, 17, 19)\necho \"count_up_to(1): \";\nprint_r(count_up_to(1)); // array()\necho \"count_up_to(18): \";\nprint_r(count_up_to(18)); // array(2, 3, 5, 7, 11, 13, 17)\n?>"}
{"task_id": "HumanEval_34_unique", "generation": "<?php\n// Return sorted unique elements in an array\n// >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(0, 2, 3, 5, 9, 123)\nfunction unique($l) {\n\n    $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n", "prompt": "<?php\n// Return sorted unique elements in an array\n// >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(0, 2, 3, 5, 9, 123)\nfunction unique($l) {\n", "wholecode": "<?php\n// Return sorted unique elements in an array\n// >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(0, 2, 3, 5, 9, 123)\nfunction unique($l) {\n    $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\n// Return the first element of an array\n// >>> first(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// 5\nfunction first($l) {\n    return $l[0];\n}\n\n// Return the last element of an array\n// >>> last(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// 123\nfunction last($l) {\n    return $l[count($l) - 1];\n}\n\n// Return the element at the given index of an array\n// >>> at(array(5, 3, 5, 2, 3, 3, 9, 0, 123), 4)\n// 3\nfunction at($l, $i) {\n    return $l[$i];\n}\n\n// Return the element at the given index of an array\n// >>> at(array(5, 3, 5, 2, 3, 3, 9, 0, 123), 4)\n// 3\nfunction at($l, $i) {\n    return $l[$i];\n}\n\n// Return the element at the given index of an array\n// >>> at(array(5, 3, 5, 2, 3, 3, 9, 0, 123), 4)\n// 3\nfunction at($l, $i) {\n    return $l[$i];\n}\n\n// Return the element at the given index of an array\n// >>> at(array(5, 3, 5, 2, 3, 3, 9, 0, 123), 4)\n// 3\nfunction at($l, $i) {\n    return $l[$i];\n}\n\n// Return the element at the given index of an array\n// >>> at(array(5, 3, 5, 2, 3, 3, 9, 0, 123), 4)\n// 3\nfunction at($l, $i) {\n    return $l[$i];\n}\n\n// Return the element at the given index"}
{"task_id": "HumanEval_74_total_match", "generation": "<?php\n// Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match(array(), array())\n// array()\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"Hi\"))\n// array(\"hI\", \"Hi\")\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hi\", \"hi\", \"admin\", \"project\"))\n// array(\"hi\", \"admin\")\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hi\"))\n// array(\"hI\", \"hi\", \"hi\")\n// >>> total_match(array(\"4\"), array(\"1\", \"2\", \"3\", \"4\", \"5\"))\n// array(\"4\")\nfunction total_match($lst1, $lst2) {\n\n    $total1 = 0;\n    $total2 = 0;\n    foreach ($lst1 as $str) {\n        $total1 += strlen($str);\n    }\n    foreach ($lst2 as $str) {\n        $total2 += strlen($str);\n    }\n    if ($total1 < $total2) {\n        return $lst1;\n    } else {\n        return $lst2;\n    }\n}", "prompt": "<?php\n// Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match(array(), array())\n// array()\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"Hi\"))\n// array(\"hI\", \"Hi\")\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hi\", \"hi\", \"admin\", \"project\"))\n// array(\"hi\", \"admin\")\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hi\"))\n// array(\"hI\", \"hi\", \"hi\")\n// >>> total_match(array(\"4\"), array(\"1\", \"2\", \"3\", \"4\", \"5\"))\n// array(\"4\")\nfunction total_match($lst1, $lst2) {\n", "wholecode": "<?php\n// Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match(array(), array())\n// array()\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"Hi\"))\n// array(\"hI\", \"Hi\")\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hi\", \"hi\", \"admin\", \"project\"))\n// array(\"hi\", \"admin\")\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hi\"))\n// array(\"hI\", \"hi\", \"hi\")\n// >>> total_match(array(\"4\"), array(\"1\", \"2\", \"3\", \"4\", \"5\"))\n// array(\"4\")\nfunction total_match($lst1, $lst2) {\n    $total1 = 0;\n    $total2 = 0;\n    foreach ($lst1 as $str) {\n        $total1 += strlen($str);\n    }\n    foreach ($lst2 as $str) {\n        $total2 += strlen($str);\n    }\n    if ($total1 < $total2) {\n        return $lst1;\n    } else {\n        return $lst2;\n    }\n}"}
{"task_id": "HumanEval_35_max_element", "generation": "<?php\n// Return maximum element in the array.\n// >>> max_element(array(1, 2, 3))\n// 3\n// >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// 123\nfunction max_element($l) {\n\n    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n    return $max;\n}\n", "prompt": "<?php\n// Return maximum element in the array.\n// >>> max_element(array(1, 2, 3))\n// 3\n// >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// 123\nfunction max_element($l) {\n", "wholecode": "<?php\n// Return maximum element in the array.\n// >>> max_element(array(1, 2, 3))\n// 3\n// >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// 123\nfunction max_element($l) {\n    $max = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] > $max) {\n            $max = $l[$i];\n        }\n    }\n    return $max;\n}\n\n// Return minimum element in the array.\n// >>> min_element(array(1, 2, 3))\n// 1\n// >>> min_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// -10\nfunction min_element($l) {\n    $min = $l[0];\n    for ($i = 1; $i < count($l); $i++) {\n        if ($l[$i] < $min) {\n            $min = $l[$i];\n        }\n    }\n    return $min;\n}\n\n// Return the sum of all elements in the array.\n// >>> sum(array(1, 2, 3))\n// 6\n// >>> sum(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// 133\nfunction sum($l) {\n    $sum = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        $sum += $l[$i];\n    }\n    return $sum;\n}\n\n// Return the product of all elements in the array.\n// >>> product(array(1, 2, 3))\n// 6\n// >>> product(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// 0\nfunction product($l) {\n    $product = 1;\n    for ($i = 0; $i < count($l); $i++) {\n        $product *= $l[$i];\n    }\n    return $product;\n}\n\n// Return the average of all elements in the array.\n// >>> average(array(1, 2, 3))\n// 2\n// >>> average(array(5, 3, -5, 2, -3, 3, 9, 0, 12"}
{"task_id": "HumanEval_132_is_nested", "generation": "<?php\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested($string) {\n\n    $stack = [];\n    $nested = false;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n        } else if ($string[$i] == ']') {\n            if (count($stack) > 0) {\n                array_pop($stack);\n                $nested = true;\n            } else {\n                return false;\n            }\n        }\n    }\n    return $nested;\n}\n", "prompt": "<?php\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested($string) {\n", "wholecode": "<?php\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested($string) {\n    $stack = [];\n    $nested = false;\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n        } else if ($string[$i] == ']') {\n            if (count($stack) > 0) {\n                array_pop($stack);\n                $nested = true;\n            } else {\n                return false;\n            }\n        }\n    }\n    return $nested;\n}\n\n// Test cases\necho is_nested(\"[[]]\") ? \"true\\n\" : \"false\\n\"; // true\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\\n\" : \"false\\n\"; // false\necho is_nested(\"[][]\") ? \"true\\n\" : \"false\\n\"; // false\necho is_nested(\"[]\") ? \"true\\n\" : \"false\\n\"; // false\necho is_nested(\"[[][]]\") ? \"true\\n\" : \"false\\n\"; // true\necho is_nested(\"[[]][[\") ? \"true\\n\" : \"false\\n\"; // true\n?>"}
{"task_id": "HumanEval_103_rounded_avg", "generation": "<?php\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg($n, $m) {\n\n    if ($n > $m) {\n        return -1;\n    }\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $avg = round($sum / ($m - $n + 1));\n    return \"0b\" . decbin($avg);\n}", "prompt": "<?php\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg($n, $m) {\n", "wholecode": "<?php\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg($n, $m) {\n    if ($n > $m) {\n        return -1;\n    }\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $avg = round($sum / ($m - $n + 1));\n    return \"0b\" . decbin($avg);\n}\n?>"}
{"task_id": "HumanEval_113_odd_count", "generation": "<?php\n// Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(array(\"1234567\"))\n// array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n// >>> odd_count(array(\"3\", \"11111111\"))\n// array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\nfunction odd_count($lst) {\n\n    $result = array();\n    foreach ($lst as $str) {\n        $count = 0;\n        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 1) {\n                $count++;\n            }\n        }\n        $result[] = \"the number of odd elements $countn the str$countng $count of the $countnput.\";\n    }\n    return $result;\n}\n", "prompt": "<?php\n// Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(array(\"1234567\"))\n// array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n// >>> odd_count(array(\"3\", \"11111111\"))\n// array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\nfunction odd_count($lst) {\n", "wholecode": "<?php\n// Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(array(\"1234567\"))\n// array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n// >>> odd_count(array(\"3\", \"11111111\"))\n// array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\nfunction odd_count($lst) {\n    $result = array();\n    foreach ($lst as $str) {\n        $count = 0;\n        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 1) {\n                $count++;\n            }\n        }\n        $result[] = \"the number of odd elements $countn the str$countng $count of the $countnput.\";\n    }\n    return $result;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check() {\n    $test_cases = array(\n        array(\"1234567\", array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")),\n        array(\"3\", array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\")),\n        array(\"11111111\", array(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")),\n        array(\"2468\", array(\"the number of odd elements 0n the str0ng 0 of the 0nput.\")),\n        array(\"13579\", array(\"the number of odd elements 5n the str5ng 5 of the 5nput.\"))\n    );\n    foreach ($test_cases as $case) {\n        $output = odd_count(array($case[0]));\n        if ($output != $case[1]) {\n            echo \"Test failed for input: \" . $case[0] . \"\\n\";\n            echo \"Expected output: \" . implode(\", \", $case[1]) . \"\\n\";\n            echo \"Actual output: \" . implode(\", \", $output) . \"\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the odd_count function\ncheck();\n?>"}
{"task_id": "HumanEval_109_move_one_ball", "generation": "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3, 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball($arr) {\n\n    $n = count($arr);\n    if ($n == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $minIndex = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n            $minIndex = $i;\n        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        $j = ($minIndex + $i) % $n;\n        if ($arr[$j] > $arr[($j + 1) % $n]) {\n            return false;\n        }\n    }\n    return true;\n}", "prompt": "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3, 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball($arr) {\n", "wholecode": "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3, 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball($arr) {\n    $n = count($arr);\n    if ($n == 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $minIndex = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n            $minIndex = $i;\n        }\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        $j = ($minIndex + $i) % $n;\n        if ($arr[$j] > $arr[($j + 1) % $n]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_107_even_odd_palindrome", "generation": "<?php\n// Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// array(1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// array(4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome($n) {\n\n    $even = 0;\n    $odd = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (is_palindrome($i)) {\n            if ($i % 2 == 0) {\n                $even++;\n            } else {\n                $odd++;\n            }\n        }\n    }\n    return array($even, $odd);\n}", "prompt": "<?php\n// Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// array(1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// array(4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome($n) {\n", "wholecode": "<?php\n// Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// array(1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// array(4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome($n) {\n    $even = 0;\n    $odd = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (is_palindrome($i)) {\n            if ($i % 2 == 0) {\n                $even++;\n            } else {\n                $odd++;\n            }\n        }\n    }\n    return array($even, $odd);\n}\nfunction is_palindrome($n) {\n    $str = strval($n);\n    $len = strlen($str);\n    for ($i = 0; $i < $len / 2; $i++) {\n        if ($str[$i] != $str[$len - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n?>"}
{"task_id": "HumanEval_138_is_equal_to_sum_even", "generation": "<?php\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even($n) {\n\n    // Your code here\n}", "prompt": "<?php\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even($n) {\n", "wholecode": "<?php\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even($n) {\n    // Your code here\n}"}
{"task_id": "HumanEval_62_derivative", "generation": "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative(array(3, 1, 2, 4, 5))\n// array(1, 4, 12, 20)\n// >>> derivative(array(1, 2, 3))\n// array(2, 6)\nfunction derivative($xs) {\n\n    $result = array();\n    $n = count($xs);\n    for ($i = 1; $i < $n; $i++) {\n        $result[] = $i * $xs[$i];\n    }\n    return $result;\n}\n", "prompt": "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative(array(3, 1, 2, 4, 5))\n// array(1, 4, 12, 20)\n// >>> derivative(array(1, 2, 3))\n// array(2, 6)\nfunction derivative($xs) {\n", "wholecode": "<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative(array(3, 1, 2, 4, 5))\n// array(1, 4, 12, 20)\n// >>> derivative(array(1, 2, 3))\n// array(2, 6)\nfunction derivative($xs) {\n    $result = array();\n    $n = count($xs);\n    for ($i = 1; $i < $n; $i++) {\n        $result[] = $i * $xs[$i];\n    }\n    return $result;\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return integral of this polynomial in the same form.\n// >>> integral(array(3, 1, 2, 4, 5))\n// array(3, 0.5, 0.66666666666667, 1, 1.25)\n// >>> integral(array(1, 2, 3))\n// array(1, 1, 1, 1)\nfunction integral($xs) {\n    $result = array();\n    $n = count($xs);\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $xs[$i] / ($i + 1);\n    }\n    return $result;\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return value of this polynomial at x.\n// >>> evaluate(array(1, 2, 3), 10)\n// 321\nfunction evaluate($xs, $x) {\n    $result = 0;\n    $n = count($xs);\n    for ($i = 0; $i < $n; $i++) {\n        $result += $xs[$i] * pow($x, $i);\n    }\n    return $result;\n}\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return roots of this polynomial.\n// >>> roots(array(1, 2, 3))\n// array(-1, -2)\nfunction roots($xs) {\n    $result = array();\n    $n = count($xs);\n    if ($n == 1) {\n        return array(-$xs[0]);\n    }\n    if ($n == 2) {\n        return array(-$xs[1] / $xs[0]);\n    }\n   "}
{"task_id": "HumanEval_126_is_sorted", "generation": "<?php\n// Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n// true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n// >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1, 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\nfunction is_sorted($lst) {\n\n    $len = count($lst);\n    if ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}", "prompt": "<?php\n// Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n// true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n// >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1, 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\nfunction is_sorted($lst) {\n", "wholecode": "<?php\n// Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n// true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n// >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1, 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_161_solve", "generation": "<?php\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve($s) {\n\n    $result = '';\n    $hasLetters = false;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            $hasLetters = true;\n            $result .= ctype_lower($s[$i]) ? strtoupper($s[$i]) : strtolower($s[$i]);\n        } else {\n            $result .= $s[$i];\n        }\n    }\n    if (!$hasLetters) {\n        $result = strrev($result);\n    }\n    return $result;\n}\n", "prompt": "<?php\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve($s) {\n", "wholecode": "<?php\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve($s) {\n    $result = '';\n    $hasLetters = false;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            $hasLetters = true;\n            $result .= ctype_lower($s[$i]) ? strtoupper($s[$i]) : strtolower($s[$i]);\n        } else {\n            $result .= $s[$i];\n        }\n    }\n    if (!$hasLetters) {\n        $result = strrev($result);\n    }\n    return $result;\n}\n\n// Example usage:\necho solve(\"1234\") . \"\\n\"; // Output: \"4321\"\necho solve(\"ab\") . \"\\n\";   // Output: \"AB\"\necho solve(\"#a@C\") . \"\\n\"; // Output: \"#A@c\""}
{"task_id": "HumanEval_130_tri", "generation": "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// array(1, 3, 2, 8)\nfunction tri($n) {\n\n    $tribonacci = array(1, 3, 2, 8);\n    for ($i = 4; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $tribonacci[$i] = 1 + ($i / 2);\n        } else {\n            $tribonacci[$i] = $tribonacci[$i - 1] + $tribonacci[$i - 2] + $tribonacci[$i + 1];\n        }\n    }\n    return $tribonacci;\n}", "prompt": "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// array(1, 3, 2, 8)\nfunction tri($n) {\n", "wholecode": "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// array(1, 3, 2, 8)\nfunction tri($n) {\n    $tribonacci = array(1, 3, 2, 8);\n    for ($i = 4; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $tribonacci[$i] = 1 + ($i / 2);\n        } else {\n            $tribonacci[$i] = $tribonacci[$i - 1] + $tribonacci[$i - 2] + $tribonacci[$i + 1];\n        }\n    }\n    return $tribonacci;\n}\n?>"}
{"task_id": "HumanEval_36_fizz_buzz", "generation": "<?php\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz($n) {\n\n    $count = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $count += substr_count((string)$i, '7');\n        }\n    }\n    return $count;\n}\n", "prompt": "<?php\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz($n) {\n", "wholecode": "<?php\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz($n) {\n    $count = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $count += substr_count((string)$i, '7');\n        }\n    }\n    return $count;\n}\n\n// Main function to test the generated function\nfunction main() {\n    assert(fizz_buzz(50) == 0);\n    assert(fizz_buzz(78) == 2);\n    assert(fizz_buzz(79) == 3);\n    echo \"All tests passed!\\n\";\n}\n\nmain();\n?>"}
{"task_id": "HumanEval_29_filter_by_prefix", "generation": "<?php\n// Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix(array(), \"a\")\n// array()\n// >>> filter_by_prefix(array(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"array\")\nfunction filter_by_prefix($strings, $prefix) {\n\n    return array_filter($strings, function($string) use ($prefix) {\n        return strpos($string, $prefix) === 0;\n    });\n}\n", "prompt": "<?php\n// Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix(array(), \"a\")\n// array()\n// >>> filter_by_prefix(array(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"array\")\nfunction filter_by_prefix($strings, $prefix) {\n", "wholecode": "<?php\n// Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix(array(), \"a\")\n// array()\n// >>> filter_by_prefix(array(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"array\")\nfunction filter_by_prefix($strings, $prefix) {\n    return array_filter($strings, function($string) use ($prefix) {\n        return strpos($string, $prefix) === 0;\n    });\n}\n\n// Check function to verify the correctness of the filter_by_prefix function.\nfunction check() {\n    $testCases = array(\n        array(\"input\" => array(), \"prefix\" => \"a\", \"expected\" => array()),\n        array(\"input\" => array(\"abc\", \"bcd\", \"cde\", \"array\"), \"prefix\" => \"a\", \"expected\" => array(\"abc\", \"array\")),\n        array(\"input\" => array(\"apple\", \"banana\", \"apricot\", \"cherry\"), \"prefix\" => \"ap\", \"expected\" => array(\"apple\", \"apricot\")),\n    );\n\n    foreach ($testCases as $testCase) {\n        $result = filter_by_prefix($testCase[\"input\"], $testCase[\"prefix\"]);\n        if ($result === $testCase[\"expected\"]) {\n            echo \"Test passed for input: \" . implode(\", \", $testCase[\"input\"]) . \"\\n\";\n        } else {\n            echo \"Test failed for input: \" . implode(\", \", $testCase[\"input\"]) . \"\\n\";\n        }\n    }\n}\n\n// Run the check function to verify the correctness of the filter_by_prefix function.\ncheck();\n?>"}
{"task_id": "HumanEval_84_solve", "generation": "<?php\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 ‚â§ N ‚â§ 10000.\n// Output:\n// a string of binary number\nfunction solve($N) {\n\n    $sum = 0;\n    while ($N > 0) {\n        $sum += $N % 10;\n        $N = (int)($N / 10);\n    }\n    return decbin($sum);\n}", "prompt": "<?php\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 ‚â§ N ‚â§ 10000.\n// Output:\n// a string of binary number\nfunction solve($N) {\n", "wholecode": "<?php\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 ‚â§ N ‚â§ 10000.\n// Output:\n// a string of binary number\nfunction solve($N) {\n    $sum = 0;\n    while ($N > 0) {\n        $sum += $N % 10;\n        $N = (int)($N / 10);\n    }\n    return decbin($sum);\n}"}
{"task_id": "HumanEval_129_minPath", "generation": "<?php\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)\n// array(1, 2, 1)\n// >>> minPath(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1)\n// array(1)\nfunction minPath($grid, $k) {\n\n    $n = count($grid);\n    $dp = array_fill(0, $n, array_fill(0, $n, array_fill(0, $k + 1, PHP_INT_MAX)));\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $dp[$i][$j][1] = $grid[$i][$j];\n        }\n    }\n    for ($len = 2; $len <= $k; $len++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                for ($di = -1; $di <= 1; $di++) {\n                    for ($dj = -1; $dj <= 1; $dj++) {\n                        if ($di == 0 && $dj == 0) continue;\n                        $ni = $i + $di;\n                        $nj = $j + $dj;\n                        if ($ni < 0 || $ni >= $n || $nj < 0 || $nj >= $n) continue;\n                        $dp[$i][$j][$len] = min($dp[$i][$j][$len], $dp[$ni][$nj][$len - 1] + $grid[$i][$j]);\n                    }\n                }\n            }\n        }\n    }\n    $min = PHP_INT_MAX;\n    $min_i = $min_j = $min_len = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            for ($len = 1; $len <= $k; $len++) {\n                if ($dp[$i][$j][$len] < $min) {\n                    $min = $dp[$i][$j][$len];\n                    $min_i = $i;\n                    $min_j = $j;\n                    $min_len = $len;\n                }\n            }\n        }\n    }\n    $path = array_fill(0, $k, 0);\n    $path[$k - 1] = $grid[$min_i][$min_j];\n    for ($len = $min_len - 1; $len >= 1; $len--)", "prompt": "<?php\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)\n// array(1, 2, 1)\n// >>> minPath(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1)\n// array(1)\nfunction minPath($grid, $k) {\n", "wholecode": "<?php\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)\n// array(1, 2, 1)\n// >>> minPath(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1)\n// array(1)\nfunction minPath($grid, $k) {\n    $n = count($grid);\n    $dp = array_fill(0, $n, array_fill(0, $n, array_fill(0, $k + 1, PHP_INT_MAX)));\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $dp[$i][$j][1] = $grid[$i][$j];\n        }\n    }\n    for ($len = 2; $len <= $k; $len++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                for ($di = -1; $di <= 1; $di++) {\n                    for ($dj = -1; $dj <= 1; $dj++) {\n                        if ($di == 0 && $dj == 0) continue;\n                        $ni = $i + $di;\n                        $nj = $j + $dj;\n                        if ($ni < 0 || $ni >= $n || $nj < 0 || $nj >= $n) continue;\n                        $dp[$i][$j][$len] = min($dp[$i][$j][$len], $dp[$ni][$nj][$len - 1] + $grid[$i][$j]);\n                    }\n                }\n            }\n        }\n    }\n    $min = PHP_INT_MAX;\n    $min_i = $min_j = $min_len = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            for ($len = 1; $len <= $k; $len++) {\n                if ($dp[$i][$j][$len] < $min) {\n                    $min = $dp[$i][$j][$len];\n                    $min_i = $i;\n                    $min_j = $j;\n                    $min_len = $len;\n                }\n            }\n        }\n    }\n    $path = array_fill(0, $k, 0);\n    $path[$k - 1] = $grid[$min_i][$min_j];\n    for ($len = $min_len - 1; $len >= 1; $len--)"}
{"task_id": "HumanEval_98_count_upper", "generation": "<?php\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper($s) {\n\n    $count = 0;\n    $vowels = ['A', 'E', 'I', 'O', 'U'];\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (in_array($s[$i], $vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n", "prompt": "<?php\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper($s) {\n", "wholecode": "<?php\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper($s) {\n    $count = 0;\n    $vowels = ['A', 'E', 'I', 'O', 'U'];\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (in_array($s[$i], $vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($input, $expected) {\n    $result = count_upper($input);\n    if ($result === $expected) {\n        echo \"PASS: The function correctly counted {$result} uppercase vowels in '{$input}'.\\n\";\n    } else {\n        echo \"FAIL: The function returned {$result} instead of {$expected} for '{$input}'.\\n\";\n    }\n}\n\n// Provided data points\ncheck(\"aBCdEf\", 1);\ncheck(\"abcdefg\", 0);\ncheck(\"dBBE\", 0);\n?>"}
{"task_id": "HumanEval_120_maximum", "generation": "<?php\n// Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum(array(-3, -4, 5), 3)\n// array(-4, -3, 5)\n// Example 2:\n// >>> maximum(array(4, -4, 4), 2)\n// array(4, 4)\n// Example 3:\n// >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\n// array(2)\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k) {\n\n    $arr = array_reverse($arr);\n    $arr = array_slice($arr, 0, $k);\n    sort($arr);\n    return $arr;\n}", "prompt": "<?php\n// Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum(array(-3, -4, 5), 3)\n// array(-4, -3, 5)\n// Example 2:\n// >>> maximum(array(4, -4, 4), 2)\n// array(4, 4)\n// Example 3:\n// >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\n// array(2)\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k) {\n", "wholecode": "<?php\n// Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum(array(-3, -4, 5), 3)\n// array(-4, -3, 5)\n// Example 2:\n// >>> maximum(array(4, -4, 4), 2)\n// array(4, 4)\n// Example 3:\n// >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\n// array(2)\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k) {\n    $arr = array_reverse($arr);\n    $arr = array_slice($arr, 0, $k);\n    sort($arr);\n    return $arr;\n}"}
{"task_id": "HumanEval_24_largest_divisor", "generation": "<?php\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n) {\n\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n    return 1; // If no divisor is found, return 1 (since every number is divisible by 1)\n}\n", "prompt": "<?php\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n) {\n", "wholecode": "<?php\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n) {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n    return 1; // If no divisor is found, return 1 (since every number is divisible by 1)\n}\n\n// Main function to test the generated function\nfunction main() {\n    $testCases = array(15, 17, 100, 1);\n    foreach ($testCases as $testCase) {\n        echo \"The largest divisor of {$testCase} is \" . largest_divisor($testCase) . \"\\n\";\n    }\n}\n\n// Example usage:\nmain();\n?>"}
{"task_id": "HumanEval_88_sort_array", "generation": "<?php\n// Given an array of non-negative integers, return a cophp of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array(array())\n// array()\n// >>> sort_array(array(5))\n// array(5)\n// >>> sort_array(array(2, 4, 3, 0, 1, 5))\n// array(0, 1, 2, 3, 4, 5)\n// >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n// array(6, 5, 4, 3, 2, 1, 0)\nfunction sort_array($array) {\n\n    if (count($array) <= 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n}", "prompt": "<?php\n// Given an array of non-negative integers, return a cophp of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array(array())\n// array()\n// >>> sort_array(array(5))\n// array(5)\n// >>> sort_array(array(2, 4, 3, 0, 1, 5))\n// array(0, 1, 2, 3, 4, 5)\n// >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n// array(6, 5, 4, 3, 2, 1, 0)\nfunction sort_array($array) {\n", "wholecode": "<?php\n// Given an array of non-negative integers, return a cophp of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array(array())\n// array()\n// >>> sort_array(array(5))\n// array(5)\n// >>> sort_array(array(2, 4, 3, 0, 1, 5))\n// array(0, 1, 2, 3, 4, 5)\n// >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n// array(6, 5, 4, 3, 2, 1, 0)\nfunction sort_array($array) {\n    if (count($array) <= 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n}\n?>"}
{"task_id": "HumanEval_106_f", "generation": "<?php\n// Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// array(1, 2, 6, 24, 15)\nfunction f($n) {\n\n    $result = array();\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = factorial($i);\n        } else {\n            $result[] = sum($i);\n        }\n    }\n    return $result;\n}\n", "prompt": "<?php\n// Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// array(1, 2, 6, 24, 15)\nfunction f($n) {\n", "wholecode": "<?php\n// Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// array(1, 2, 6, 24, 15)\nfunction f($n) {\n    $result = array();\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = factorial($i);\n        } else {\n            $result[] = sum($i);\n        }\n    }\n    return $result;\n}\n\nfunction factorial($n) {\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\n\nfunction sum($n) {\n    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $result += $i;\n    }\n    return $result;\n}\n\n// Test the function\nprint_r(f(5)); // Output: Array ( [0] => 1 [1] => 2 [2] => 6 [3] => 24 [4] => 15 )"}
{"task_id": "HumanEval_77_iscube", "generation": "<?php\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\n    return pow(round(pow($a, 1/3)), 3) == $a;\n}", "prompt": "<?php\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n", "wholecode": "<?php\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n    return pow(round(pow($a, 1/3)), 3) == $a;\n}"}
{"task_id": "HumanEval_93_encode", "generation": "<?php\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode($message) {\n\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $encoded = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n        if (ctype_alpha($char)) {\n            $char = ctype_upper($char) ? strtolower($char) : strtoupper($char);\n            if (in_array($char, $vowels)) {\n                $char = chr(ord($char) + 2);\n            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", "prompt": "<?php\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode($message) {\n", "wholecode": "<?php\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode($message) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $encoded = '';\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char = $message[$i];\n        if (ctype_alpha($char)) {\n            $char = ctype_upper($char) ? strtolower($char) : strtoupper($char);\n            if (in_array($char, $vowels)) {\n                $char = chr(ord($char) + 2);\n            }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}"}
{"task_id": "HumanEval_91_is_bored", "generation": "<?php\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n\n    $count = 0;\n    $sentences = preg_split('/[.?!]/', $S);\n    foreach ($sentences as $sentence) {\n        $words = explode(' ', $sentence);\n        if (strtolower($words[0]) === 'i') {\n            $count++;\n        }\n    }\n    return $count;\n}", "prompt": "<?php\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n", "wholecode": "<?php\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $count = 0;\n    $sentences = preg_split('/[.?!]/', $S);\n    foreach ($sentences as $sentence) {\n        $words = explode(' ', $sentence);\n        if (strtolower($words[0]) === 'i') {\n            $count++;\n        }\n    }\n    return $count;\n}"}
{"task_id": "HumanEval_43_pairs_sum_to_zero", "generation": "<?php\n// pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n// >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1, 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n// >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n\n    $seen = array();\n    foreach ($l as $num) {\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n", "prompt": "<?php\n// pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n// >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1, 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n// >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n", "wholecode": "<?php\n// pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n// >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1, 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n// >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n    $seen = array();\n    foreach ($l as $num) {\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        $seen[] = $num;\n    }\n    return false;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($function) {\n    $test_cases = array(\n        array(1, 3, 5, 0) => false,\n        array(1, 3, -2, 1) => false,\n        array(1, 2, 3, 7) => false,\n        array(2, 4, -5, 3, 5, 7) => true,\n        array(1) => false\n    );\n\n    foreach ($test_cases as $input => $expected) {\n        $result = $function($input);\n        if ($result !== $expected) {\n            echo \"Test failed for input \" . implode(\", \", $input) . \". Expected $expected, got $result.\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed.\\n\";\n}\n\n// Run the check function to verify the correctness of the pairs_sum_to_zero function\ncheck('pairs_sum_to_zero');\n?>"}
{"task_id": "HumanEval_71_triangle_area", "generation": "<?php\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area($a, $b, $c) {\n\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2;\n        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n        return round($area, 2);\n    } else {\n        return -1;\n    }\n}\n", "prompt": "<?php\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area($a, $b, $c) {\n", "wholecode": "<?php\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2;\n        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n        return round($area, 2);\n    } else {\n        return -1;\n    }\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($a, $b, $c, $expected) {\n    $result = triangle_area($a, $b, $c);\n    if ($result === $expected) {\n        echo \"PASS: With sides $a, $b, $c, the area is $result.\\n\";\n    } else {\n        echo \"FAIL: With sides $a, $b, $c, expected $expected but got $result.\\n\";\n    }\n}\n\n// Provided data points\ncheck(3, 4, 5, 6.0); // Should return 6.0\ncheck(1, 2, 10, -1); // Should return -1\ncheck(5, 5, 5, 10.83); // Should return 10.83\n?>"}
{"task_id": "HumanEval_148_bf", "generation": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n    if ($index1 === false || $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2) {\n        list($index1, $index2) = array($index2, $index1);\n    }\n    return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n}", "prompt": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n", "wholecode": "<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n    if ($index1 === false || $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2) {\n        list($index1, $index2) = array($index2, $index1);\n    }\n    return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n}\n?>"}
{"task_id": "HumanEval_131_digits", "generation": "<?php\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n\n    $product = 1;\n    $hasOdd = false;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n            $hasOdd = true;\n        }\n        $n = (int)($n / 10);\n    }\n    return $hasOdd ? $product : 0;\n}\n", "prompt": "<?php\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n", "wholecode": "<?php\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n    $product = 1;\n    $hasOdd = false;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n            $hasOdd = true;\n        }\n        $n = (int)($n / 10);\n    }\n    return $hasOdd ? $product : 0;\n}\n\n// Check function to verify the correctness of the digits function\nfunction check($testCase, $expected) {\n    $result = digits($testCase);\n    if ($result === $expected) {\n        echo \"Test case {$testCase}: PASSED\\n\";\n    } else {\n        echo \"Test case {$testCase}: FAILED (Expected {$expected}, got {$result})\\n\";\n    }\n}\n\n// Provided data points\ncheck(1, 1); // 1 is the only digit, and it's odd\ncheck(4, 0); // All digits are even\ncheck(235, 15); // 3 * 5 = 15\ncheck(2468, 0); // All digits are even\ncheck(13579, 945); // 1 * 3 * 5 * 7 * 9 = 945\n?>"}
{"task_id": "HumanEval_101_words_string", "generation": "<?php\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// array(\"Hi\", \"my\", \"name\", \"is\", \"John\")\n// >>> words_string(\"One, two, three, four, five, six\")\n// array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")\nfunction words_string($s) {\n\n    return explode(',', str_replace(' ', ',', $s));\n}\n", "prompt": "<?php\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// array(\"Hi\", \"my\", \"name\", \"is\", \"John\")\n// >>> words_string(\"One, two, three, four, five, six\")\n// array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")\nfunction words_string($s) {\n", "wholecode": "<?php\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// array(\"Hi\", \"my\", \"name\", \"is\", \"John\")\n// >>> words_string(\"One, two, three, four, five, six\")\n// array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")\nfunction words_string($s) {\n    return explode(',', str_replace(' ', ',', $s));\n}\n\n// Main function to test the generated function\nfunction main() {\n    $testCases = array(\n        \"Hi, my name is John\" => array(\"Hi\", \"my\", \"name\", \"is\", \"John\"),\n        \"One, two, three, four, five, six\" => array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"),\n        \"Hello World\" => array(\"Hello\", \"World\"),\n        \"PHP, is, fun\" => array(\"PHP\", \"is\", \"fun\")\n    );\n\n    foreach ($testCases as $input => $expected) {\n        $result = words_string($input);\n        if ($result === $expected) {\n            echo \"PASS: words_string('$input')\\n\";\n        } else {\n            echo \"FAIL: words_string('$input')\\n\";\n            echo \"Expected: \" . json_encode($expected) . \"\\n\";\n            echo \"Got: \" . json_encode($result) . \"\\n\";\n        }\n    }\n}\n\n// Run the main function to test the words_string function\nmain();\n?>"}
{"task_id": "HumanEval_18_how_many_times", "generation": "<?php\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times($string, $substring) {\n\n    $count = 0;\n    $pos = 0;\n    while (($pos = strpos($string, $substring, $pos)) !== false) {\n        $count++;\n        $pos += strlen($substring);\n    }\n    return $count;\n}\n", "prompt": "<?php\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times($string, $substring) {\n", "wholecode": "<?php\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n    $pos = 0;\n    while (($pos = strpos($string, $substring, $pos)) !== false) {\n        $count++;\n        $pos += strlen($substring);\n    }\n    return $count;\n}\n\n// Check if a given string is a palindrome.\n// >>> is_palindrome(\"racecar\")\n// true\n// >>> is_palindrome(\"hello\")\n// false\nfunction is_palindrome($string) {\n    return $string === strrev($string);\n}\n\n// Find the longest common prefix between two strings.\n// >>> longest_common_prefix(\"flower\", \"flow\")\n// \"flow\"\n// >>> longest_common_prefix(\"dog\", \"racecar\")\n// \"\"\nfunction longest_common_prefix($string1, $string2) {\n    $length = min(strlen($string1), strlen($string2));\n    for ($i = 0; $i < $length; $i++) {\n        if ($string1[$i] !== $string2[$i]) {\n            return substr($string1, 0, $i);\n        }\n    }\n    return substr($string1, 0, $length);\n}\n\n// Find the longest common suffix between two strings.\n// >>> longest_common_suffix(\"flower\", \"er\")\n// \"er\"\n// >>> longest_common_suffix(\"dog\", \"racecar\")\n// \"\"\nfunction longest_common_suffix($string1, $string2) {\n    $length1 = strlen($string1);\n    $length2 = strlen($string2);\n    $i = 0;\n    while ($i < min($length1, $length2) && $string1[$length1 - $i - 1] === $string2[$length2 - $i - 1]) {\n        $i++;\n    }\n    return substr($string1, $length1 - $i);\n}\n\n// Find the longest common substring between two strings.\n// >>> longest_common_substring(\"flower\", \"flow\")\n// \"flow\"\n// >>> longest_common_substring(\"dog\", \"racecar\")\n// \"\"\nfunction longest_common_substring($string1, $string2) {\n    $m = strlen($string1);\n    $n = strlen($string2);\n    $max_length = 0;\n    $end_index = 0;\n    $dp = array_fill(0, $m + 1, array_fill(0, $n + 1, 0));\n    for"}
{"task_id": "HumanEval_137_compare_one", "generation": "<?php\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return null if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// null\nfunction compare_one($a, $b) {\n\n    $a = (float)str_replace(',', '.', $a);\n    $b = (float)str_replace(',', '.', $b);\n    if ($a == $b) {\n        return null;\n    } elseif ($a > $b) {\n        return $a;\n    } else {\n        return $b;\n    }\n}\n", "prompt": "<?php\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return null if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// null\nfunction compare_one($a, $b) {\n", "wholecode": "<?php\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return null if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// null\nfunction compare_one($a, $b) {\n    $a = (float)str_replace(',', '.', $a);\n    $b = (float)str_replace(',', '.', $b);\n    if ($a == $b) {\n        return null;\n    } elseif ($a > $b) {\n        return $a;\n    } else {\n        return $b;\n    }\n}\n\n// Test Cases\necho compare_one(1, 2.5) . PHP_EOL; // Output: 2.5\necho compare_one(1, \"2,3\") . PHP_EOL; // Output: \"2,3\"\necho compare_one(\"5,1\", \"6\") . PHP_EOL; // Output: \"6\"\necho compare_one(\"1\", 1) . PHP_EOL; // Output: null\n?>"}
{"task_id": "HumanEval_51_remove_vowels", "generation": "<?php\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels($text) {\n\n    return preg_replace('/[aeiou]/i', '', $text);\n}\n", "prompt": "<?php\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels($text) {\n", "wholecode": "<?php\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels($text) {\n    return preg_replace('/[aeiou]/i', '', $text);\n}\n\n// Check function to verify the correctness of the remove_vowels function\nfunction check($input, $expected) {\n    $result = remove_vowels($input);\n    if ($result === $expected) {\n        echo \"PASS: The function correctly transformed '{$input}' to '{$result}'.\\n\";\n    } else {\n        echo \"FAIL: The function transformed '{$input}' to '{$result}' but expected '{$expected}'.\\n\";\n    }\n}\n\n// Provided data points to verify the correctness\ncheck(\"\", \"\");\ncheck(\"abcdef\", \"bcdf\");\ncheck(\"aaaaa\", \"\");\ncheck(\"aaBAA\", \"B\");\ncheck(\"zbcd\", \"zbcd\");\n?>"}
{"task_id": "HumanEval_70_strange_sort_list", "generation": "<?php\n// Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1, 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n// array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst) {\n\n    $sorted = sort($lst);\n    $result = [];\n    while (!empty($lst)) {\n        $result[] = array_shift($lst);\n        if (!empty($lst)) {\n            $result[] = array_pop($lst);\n        }\n    }\n    return $result;\n}", "prompt": "<?php\n// Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1, 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n// array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst) {\n", "wholecode": "<?php\n// Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1, 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n// array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst) {\n    $sorted = sort($lst);\n    $result = [];\n    while (!empty($lst)) {\n        $result[] = array_shift($lst);\n        if (!empty($lst)) {\n            $result[] = array_pop($lst);\n        }\n    }\n    return $result;\n}"}
{"task_id": "HumanEval_20_find_closest_elements", "generation": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n\n    $closest = array();\n    $min_diff = PHP_FLOAT_MAX;\n    $len = count($numbers);\n    for ($i = 0; $i < $len - 1; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff = $diff;\n                $closest = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($closest);\n    return $closest;\n}\n", "prompt": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n", "wholecode": "<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $closest = array();\n    $min_diff = PHP_FLOAT_MAX;\n    $len = count($numbers);\n    for ($i = 0; $i < $len - 1; $i++) {\n        for ($j = $i + 1; $j < $len; $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff = $diff;\n                $closest = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($closest);\n    return $closest;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check() {\n    $test_cases = array(\n        array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2) => array(2.0, 2.2),\n        array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0) => array(2.0, 2.0),\n        array(1.0, 2.0, 3.0, 4.0, 5.0, 2.1) => array(2.0, 2.1),\n        array(1.0, 2.0, 3.0, 4.0, 5.0, 2.05) => array(2.0, 2.05),\n    );\n\n    foreach ($test_cases as $input => $expected) {\n        $result = find_closest_elements($input);\n        if ($result !== $expected) {\n            echo \"Test failed for input \" . implode(\", \", $input) . \". Expected \" . implode(\", \", $expected) . \" but got \" . implode(\", \", $result) . \".\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed.\\n\";\n}\n\n// Run the check function to verify the correctness of the find_closest_elements function\ncheck();\n?>"}
{"task_id": "HumanEval_76_is_simple_power", "generation": "<?php\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n\n    if ($x == 1) {\n        return true;\n    }\n    if ($n == 1) {\n        return false;\n    }\n    $power = 1;\n    while ($power < $x) {\n        $power *= $n;\n    }\n    return $power == $x;\n}", "prompt": "<?php\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n", "wholecode": "<?php\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n    if ($n == 1) {\n        return false;\n    }\n    $power = 1;\n    while ($power < $x) {\n        $power *= $n;\n    }\n    return $power == $x;\n}"}
{"task_id": "HumanEval_39_prime_fib", "generation": "<?php\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib($n) {\n\n    $fibonacci = [0, 1];\n    $primeFib = [];\n    while (count($primeFib) < $n) {\n        $nextFib = $fibonacci[count($fibonacci) - 1] + $fibonacci[count($fibonacci) - 2];\n        $fibonacci[] = $nextFib;\n        if (is_prime($nextFib)) {\n            $primeFib[] = $nextFib;\n        }\n    }\n    return $primeFib[count($primeFib) - 1];\n}\n", "prompt": "<?php\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib($n) {\n", "wholecode": "<?php\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib($n) {\n    $fibonacci = [0, 1];\n    $primeFib = [];\n    while (count($primeFib) < $n) {\n        $nextFib = $fibonacci[count($fibonacci) - 1] + $fibonacci[count($fibonacci) - 2];\n        $fibonacci[] = $nextFib;\n        if (is_prime($nextFib)) {\n            $primeFib[] = $nextFib;\n        }\n    }\n    return $primeFib[count($primeFib) - 1];\n}\n\n// Check if a number is prime\nfunction is_prime($num) {\n    if ($num < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\necho prime_fib(1) . \"\\n\"; // 2\necho prime_fib(2) . \"\\n\"; // 3\necho prime_fib(3) . \"\\n\"; // 5\necho prime_fib(4) . \"\\n\"; // 13\necho prime_fib(5) . \"\\n\"; // 89\n?>"}
{"task_id": "HumanEval_145_order_by_points", "generation": "<?php\n// Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11, -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\nfunction order_by_points($nums) {\n\n    $sums = array();\n    foreach ($nums as $i => $num) {\n        $sums[$i] = array_sum(str_split(abs($num)));\n    }\n    array_multisort($sums, SORT_ASC, $nums);\n    return $nums;\n}", "prompt": "<?php\n// Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11, -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\nfunction order_by_points($nums) {\n", "wholecode": "<?php\n// Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11, -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\nfunction order_by_points($nums) {\n    $sums = array();\n    foreach ($nums as $i => $num) {\n        $sums[$i] = array_sum(str_split(abs($num)));\n    }\n    array_multisort($sums, SORT_ASC, $nums);\n    return $nums;\n}"}
{"task_id": "HumanEval_0_has_close_elements", "generation": "<?php\n// Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements(array(1.0, 2.0, 3.0), 0.5)\n// false\n// >>> has_close_elements(array(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n// true\nfunction has_close_elements($numbers, $threshold) {\n\n    $n = count($numbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "prompt": "<?php\n// Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements(array(1.0, 2.0, 3.0), 0.5)\n// false\n// >>> has_close_elements(array(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n// true\nfunction has_close_elements($numbers, $threshold) {\n", "wholecode": "<?php\n// Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements(array(1.0, 2.0, 3.0), 0.5)\n// false\n// >>> has_close_elements(array(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n// true\nfunction has_close_elements($numbers, $threshold) {\n    $n = count($numbers);\n    for ($i = 0; $i < $n - 1; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// Check function with provided data points\nfunction check() {\n    $test_cases = array(\n        array(array(1.0, 2.0, 3.0), 0.5, false),\n        array(array(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3, true),\n        array(array(10.0, 10.1, 10.2, 10.3), 0.05, true),\n        array(array(1.0, 2.0, 3.0, 4.0, 5.0), 1.5, false)\n    );\n\n    foreach ($test_cases as $case) {\n        $result = has_close_elements($case[0], $case[1]);\n        if ($result !== $case[2]) {\n            echo \"Test failed with input \" . json_encode($case[0]) . \" and threshold \" . $case[1] . \". Expected \" . json_encode($case[2]) . \" but got \" . json_encode($result) . \".\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed.\\n\";\n}\n\ncheck();\n?>"}
{"task_id": "HumanEval_10_make_palindrome", "generation": "<?php\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome($string) {\n\n    $length = strlen($string);\n    $palindrome = $string;\n    for ($i = 0; $i < $length; $i++) {\n        $palindrome = $string[$i] . $palindrome;\n        if (is_palindrome($palindrome)) {\n            return $palindrome;\n        }\n    }\n    return $palindrome;\n}\n", "prompt": "<?php\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome($string) {\n", "wholecode": "<?php\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome($string) {\n    $length = strlen($string);\n    $palindrome = $string;\n    for ($i = 0; $i < $length; $i++) {\n        $palindrome = $string[$i] . $palindrome;\n        if (is_palindrome($palindrome)) {\n            return $palindrome;\n        }\n    }\n    return $palindrome;\n}\n\n// Check if a string is a palindrome.\n// >>> is_palindrome(\"\")\n// True\n// >>> is_palindrome(\"a\")\n// True\n// >>> is_palindrome(\"ab\")\n// False\n// >>> is_palindrome(\"aba\")\n// True\nfunction is_palindrome($string) {\n    $length = strlen($string);\n    for ($i = 0; $i < $length / 2; $i++) {\n        if ($string[$i] != $string[$length - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Find the longest palindromic suffix of a string.\n// >>> longest_palindromic_suffix(\"\")\n// \"\"\n// >>> longest_palindromic_suffix(\"a\")\n// \"a\"\n// >>> longest_palindromic_suffix(\"ab\")\n// \"\"\n// >>> longest_palindromic_suffix(\"aba\")\n// \"aba\"\nfunction longest_palindromic_suffix($string) {\n    $length = strlen($string);\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix = substr($string, $i);\n        if (is_palindrome($suffix)) {\n            return $suffix;\n        }\n    }\n    return \"\";\n}\n\n// Find the longest palindromic prefix of a string.\n// >>> longest_palindromic_prefix(\"\")\n// \"\"\n// >>> longest_palindromic_prefix(\"a\")\n// \"a\"\n// >>> longest_palindromic_prefix(\"ab\")\n// \"\"\n// >>> longest_palindromic_prefix(\"aba\")\n// \"aba\"\nfunction longest_palindromic_prefix($string) {\n    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n        $prefix = substr($string, 0, $i + 1);\n        if (is_palindrome($prefix)) {\n            return $prefix;\n        }\n    }\n    return \"\";\n}\n\n// Find the longest palindromic substring of a string.\n// >>> longest_pal"}
{"task_id": "HumanEval_11_string_xor", "generation": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] === $b[$i] ? '0' : '1';\n    }\n    return $result;\n}\n", "prompt": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n", "wholecode": "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= $a[$i] === $b[$i] ? '0' : '1';\n    }\n    return $result;\n}\n\n// Check function to verify the correctness of the string_xor function\nfunction check($a, $b, $expected) {\n    $result = string_xor($a, $b);\n    if ($result === $expected) {\n        echo \"PASS: XOR of '$a' and '$b' is '$result'.\\n\";\n    } else {\n        echo \"FAIL: XOR of '$a' and '$b' is '$result', expected '$expected'.\\n\";\n    }\n}\n\n// Provided data points\ncheck(\"010\", \"110\", \"100\");\ncheck(\"10101\", \"00111\", \"10010\");\ncheck(\"1111\", \"0000\", \"1111\");\ncheck(\"111\", \"101\", \"010\");\n?>"}
{"task_id": "HumanEval_139_special_factorial", "generation": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n    }\n    return $result;\n}\n", "prompt": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n", "wholecode": "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n    }\n    return $result;\n}\n\nfunction factorial($n) {\n    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($input, $expected) {\n    $output = special_factorial($input);\n    if ($output === $expected) {\n        echo \"Test passed for input $input. Output: $output\\n\";\n    } else {\n        echo \"Test failed for input $input. Expected: $expected, got: $output\\n\";\n    }\n}\n\n// Provided data points\ncheck(4, 288); // Example check\ncheck(5, 34560); // Example check\ncheck(6, 24883200); // Example check\n?>"}
{"task_id": "HumanEval_122_add_elements", "generation": "<?php\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements($arr, $k) {\n\n    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        if ($arr[$i] >= -99 && $arr[$i] <= 99) {\n            $sum += $arr[$i];\n        }\n    }\n    return $sum;\n}", "prompt": "<?php\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements($arr, $k) {\n", "wholecode": "<?php\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements($arr, $k) {\n    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        if ($arr[$i] >= -99 && $arr[$i] <= 99) {\n            $sum += $arr[$i];\n        }\n    }\n    return $sum;\n}\n?>"}
{"task_id": "HumanEval_46_fib4", "generation": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n", "prompt": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n", "wholecode": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\n// Test cases\necho fib4(5) . \"\\n\"; // Output: 4\necho fib4(6) . \"\\n\"; // Output: 8\necho fib4(7) . \"\\n\"; // Output: 14"}
{"task_id": "HumanEval_104_unique_digits", "generation": "<?php\n// Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits(array(15, 33, 1422, 1))\n// array(1, 15, 33)\n// >>> unique_digits(array(152, 323, 1422, 10))\n// array()\nfunction unique_digits($x) {\n\n    $result = array();\n    foreach ($x as $value) {\n        $digits = str_split($value);\n        $has_even_digit = false;\n        foreach ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even_digit = true;\n                break;\n            }\n        }\n        if (!$has_even_digit) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}", "prompt": "<?php\n// Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits(array(15, 33, 1422, 1))\n// array(1, 15, 33)\n// >>> unique_digits(array(152, 323, 1422, 10))\n// array()\nfunction unique_digits($x) {\n", "wholecode": "<?php\n// Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits(array(15, 33, 1422, 1))\n// array(1, 15, 33)\n// >>> unique_digits(array(152, 323, 1422, 10))\n// array()\nfunction unique_digits($x) {\n    $result = array();\n    foreach ($x as $value) {\n        $digits = str_split($value);\n        $has_even_digit = false;\n        foreach ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even_digit = true;\n                break;\n            }\n        }\n        if (!$has_even_digit) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}"}
{"task_id": "HumanEval_117_select_words", "generation": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\n    $words = explode(\" \", $s);\n    $result = array();\n    foreach ($words as $word) {\n        $consonants = preg_replace(\"/[aeiou]/i\", \"\", $word);\n        if (strlen($consonants) == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}", "prompt": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n", "wholecode": "<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = explode(\" \", $s);\n    $result = array();\n    foreach ($words as $word) {\n        $consonants = preg_replace(\"/[aeiou]/i\", \"\", $word);\n        if (strlen($consonants) == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n?>"}
{"task_id": "HumanEval_72_will_it_fly", "generation": "<?php\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly(array(1, 2), 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly(array(3, 2, 3), 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly(array(3, 2, 3), 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly(array(3), 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly($q, $w) {\n\n    $sum = array_sum($q);\n    $len = count($q);\n    $mid = floor($len / 2);\n    for ($i = 0; $i < $mid; $i++) {\n        if ($q[$i] != $q[$len - $i - 1]) {\n            return false;\n        }\n    }\n    return $sum <= $w;\n}", "prompt": "<?php\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly(array(1, 2), 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly(array(3, 2, 3), 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly(array(3, 2, 3), 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly(array(3), 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly($q, $w) {\n", "wholecode": "<?php\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly(array(1, 2), 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly(array(3, 2, 3), 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly(array(3, 2, 3), 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly(array(3), 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly($q, $w) {\n    $sum = array_sum($q);\n    $len = count($q);\n    $mid = floor($len / 2);\n    for ($i = 0; $i < $mid; $i++) {\n        if ($q[$i] != $q[$len - $i - 1]) {\n            return false;\n        }\n    }\n    return $sum <= $w;\n}\n?>"}
{"task_id": "HumanEval_55_fib", "generation": "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n\n    if ($n <= 1) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n", "prompt": "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n", "wholecode": "<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 1) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\n// Return the sum of all even Fibonacci numbers up to n.\n// >>> sumEvenFib(10)\n// 10\n// >>> sumEvenFib(34)\n// 44\n// >>> sumEvenFib(60)\n// 44\n// >>> sumEvenFib(1)\n// 0\n// >>> sumEvenFib(0)\n// 0\nfunction sumEvenFib($n) {\n    $sum = 0;\n    $fib = 0;\n    $prevFib = 1;\n    while ($fib <= $n) {\n        if ($fib % 2 == 0) {\n            $sum += $fib;\n        }\n        $temp = $fib;\n        $fib += $prevFib;\n        $prevFib = $temp;\n    }\n    return $sum;\n}\n\n// Check if a number is a prime number.\n// >>> isPrime(2)\n// true\n// >>> isPrime(11)\n// true\n// >>> isPrime(4)\n// false\n// >>> isPrime(1)\n// false\nfunction isPrime($n) {\n    if ($n <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Return the nth prime number.\n// >>> nthPrime(1)\n// 2\n// >>> nthPrime(5)\n// 11\n// >>> nthPrime(10)\n// 29\nfunction nthPrime($n) {\n    $count = 0;\n    $num = 2;\n    while ($count < $n) {\n        if (isPrime($num)) {\n            $count++;\n        }\n        $num++;\n    }\n    return $num - 1;\n}\n\n// Return the sum of all prime numbers up to n.\n// >>> sumPrimes(10)\n// 17\n// >>> sumPrimes(20)\n// 77\n// >>> sumPrimes(100)\n// 1060\nfunction sumPrimes($n) {\n    $"}
{"task_id": "HumanEval_153_Strongest_Extension", "generation": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n\n    $strongest = $extensions[0];\n    $strongest_strength = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n        foreach (str_split($extension) as $char) {\n            if (ctype_upper($char)) {\n                $strength++;\n            } else if (ctype_lower($char)) {\n                $strength--;\n            }\n        }\n        if ($strength > $strongest_strength) {\n            $strongest = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . \".\" . $strongest;\n}", "prompt": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n", "wholecode": "<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $strongest = $extensions[0];\n    $strongest_strength = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n        foreach (str_split($extension) as $char) {\n            if (ctype_upper($char)) {\n                $strength++;\n            } else if (ctype_lower($char)) {\n                $strength--;\n            }\n        }\n        if ($strength > $strongest_strength) {\n            $strongest = $extension;\n            $strongest_strength = $strength;\n        }\n    }\n    return $class_name . \".\" . $strongest;\n}"}
{"task_id": "HumanEval_119_match_parens", "generation": "<?php\n// You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\nfunction match_parens($lst) {\n\n    $str = $lst[0] . $lst[1];\n    $count = 0;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n        }\n    }\n    return 'Yes';\n}", "prompt": "<?php\n// You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\nfunction match_parens($lst) {\n", "wholecode": "<?php\n// You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\nfunction match_parens($lst) {\n    $str = $lst[0] . $lst[1];\n    $count = 0;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i] == '(') {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n        }\n    }\n    return 'Yes';\n}\n?>"}
{"task_id": "HumanEval_90_next_smallest", "generation": "<?php\n// You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return null if there is no such element.\n// >>> next_smallest(array(1, 2, 3, 4, 5))\n// 2\n// >>> next_smallest(array(5, 1, 4, 3, 2))\n// 2\n// >>> next_smallest(array())\n// null\n// >>> next_smallest(array(1, 1))\n// null\nfunction next_smallest($lst) {\n\n    if (count($lst) < 2) {\n        return null;\n    }\n    $min = min($lst);\n    $lst = array_diff($lst, array($min));\n    return min($lst);\n}", "prompt": "<?php\n// You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return null if there is no such element.\n// >>> next_smallest(array(1, 2, 3, 4, 5))\n// 2\n// >>> next_smallest(array(5, 1, 4, 3, 2))\n// 2\n// >>> next_smallest(array())\n// null\n// >>> next_smallest(array(1, 1))\n// null\nfunction next_smallest($lst) {\n", "wholecode": "<?php\n// You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return null if there is no such element.\n// >>> next_smallest(array(1, 2, 3, 4, 5))\n// 2\n// >>> next_smallest(array(5, 1, 4, 3, 2))\n// 2\n// >>> next_smallest(array())\n// null\n// >>> next_smallest(array(1, 1))\n// null\nfunction next_smallest($lst) {\n    if (count($lst) < 2) {\n        return null;\n    }\n    $min = min($lst);\n    $lst = array_diff($lst, array($min));\n    return min($lst);\n}\n?>"}
{"task_id": "HumanEval_92_any_int", "generation": "<?php\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z) {\n\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}", "prompt": "<?php\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z) {\n", "wholecode": "<?php\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n?>"}
{"task_id": "HumanEval_2_truncate_number", "generation": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n\n    return $number - floor($number);\n}\n", "prompt": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n", "wholecode": "<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return $number - floor($number);\n}\n\n// Check function to verify the correctness of the truncate_number function\nfunction check($input, $expected) {\n    $result = truncate_number($input);\n    if (abs($result - $expected) < 0.0001) {\n        echo \"PASS: truncate_number($input) returns $result\\n\";\n    } else {\n        echo \"FAIL: truncate_number($input) returns $result, expected $expected\\n\";\n    }\n}\n\n// Provided data points to verify the correctness\ncheck(3.5, 0.5);\ncheck(10.99, 0.99);\ncheck(0.123, 0.123);\ncheck(5.0, 0.0);\n?>"}
{"task_id": "HumanEval_42_incr_list", "generation": "<?php\n// Return array with elements incremented by 1.\n// >>> incr_list(array(1, 2, 3))\n// array(2, 3, 4)\n// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(6, 4, 6, 3, 4, 4, 10, 1, 124)\nfunction incr_list($l) {\n\n    $result = array();\n    foreach ($l as $i) {\n        $result[] = $i + 1;\n    }\n    return $result;\n}\n", "prompt": "<?php\n// Return array with elements incremented by 1.\n// >>> incr_list(array(1, 2, 3))\n// array(2, 3, 4)\n// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(6, 4, 6, 3, 4, 4, 10, 1, 124)\nfunction incr_list($l) {\n", "wholecode": "<?php\n// Return array with elements incremented by 1.\n// >>> incr_list(array(1, 2, 3))\n// array(2, 3, 4)\n// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(6, 4, 6, 3, 4, 4, 10, 1, 124)\nfunction incr_list($l) {\n    $result = array();\n    foreach ($l as $i) {\n        $result[] = $i + 1;\n    }\n    return $result;\n}\n\n// Return array with elements decremented by 1.\n// >>> decr_list(array(1, 2, 3))\n// array(0, 1, 2)\n// >>> decr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(4, 2, 4, 1, 2, 2, 8, -1, 122)\nfunction decr_list($l) {\n    $result = array();\n    foreach ($l as $i) {\n        $result[] = $i - 1;\n    }\n    return $result;\n}\n\n// Return array with elements multiplied by 2.\n// >>> double_list(array(1, 2, 3))\n// array(2, 4, 6)\n// >>> double_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(10, 6, 10, 4, 6, 6, 18, 0, 246)\nfunction double_list($l) {\n    $result = array();\n    foreach ($l as $i) {\n        $result[] = $i * 2;\n    }\n    return $result;\n}\n\n// Return array with elements divided by 2.\n// >>> halve_list(array(1, 2, 3))\n// array(0, 1, 1)\n// >>> halve_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(2, 1, 2, 1, 1, 1, 4, 0, 61)\nfunction halve_list($l) {\n    $result = array();\n    foreach ($l as $i) {\n        $result[] = $i / 2;\n    }\n    return $result;\n}\n\n// Return array with elements squared.\n// >>> square_list(array(1, 2, 3))\n// array(1, 4, 9)\n// >>>"}
{"task_id": "HumanEval_150_x_or_y", "generation": "<?php\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y($n, $x, $y) {\n\n    if (is_prime($n)) {\n        return $x;\n    } else {\n        return $y;\n    }\n}\n", "prompt": "<?php\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y($n, $x, $y) {\n", "wholecode": "<?php\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y($n, $x, $y) {\n    if (is_prime($n)) {\n        return $x;\n    } else {\n        return $y;\n    }\n}\n\n// Helper function to check if a number is prime\nfunction is_prime($n) {\n    if ($n <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check() {\n    $test_cases = array(\n        array(7, 34, 12, 34),\n        array(15, 8, 5, 5),\n        array(2, 10, 20, 10),\n        array(1, 5, 10, 10),\n        array(17, 25, 30, 25)\n    );\n    foreach ($test_cases as $case) {\n        $result = x_or_y($case[0], $case[1], $case[2]);\n        if ($result !== $case[3]) {\n            echo \"Test failed for input (\" . implode(\", \", array_slice($case, 0, 3)) . \"): Expected \" . $case[3] . \", got \" . $result . \"\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the x_or_y function\ncheck();\n?>"}
{"task_id": "HumanEval_49_modp", "generation": "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\n    $result = 1;\n    $base = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $result = ($result * $base) % $p;\n        }\n        $base = ($base * $base) % $p;\n        $n = intdiv($n, 2);\n    }\n    return $result;\n}\n", "prompt": "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n", "wholecode": "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result = 1;\n    $base = 2;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n            $result = ($result * $base) % $p;\n        }\n        $base = ($base * $base) % $p;\n        $n = intdiv($n, 2);\n    }\n    return $result;\n}\n\n// Main function to test the generated function.\nfunction main() {\n    echo modp(3, 5) . PHP_EOL;  // Output: 3\n    echo modp(1101, 101) . PHP_EOL;  // Output: 2\n    echo modp(0, 101) . PHP_EOL;  // Output: 1\n    echo modp(3, 11) . PHP_EOL;  // Output: 8\n    echo modp(100, 101) . PHP_EOL;  // Output: 1\n}\n\n// Example usage:\nmain();\n?>"}
{"task_id": "HumanEval_155_even_odd_count", "generation": "<?php\n// Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// array(1, 1)\n// >>> even_odd_count(123)\n// array(1, 2)\nfunction even_odd_count($num) {\n\n    $num = abs($num);\n    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return array($even, $odd);\n}", "prompt": "<?php\n// Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// array(1, 1)\n// >>> even_odd_count(123)\n// array(1, 2)\nfunction even_odd_count($num) {\n", "wholecode": "<?php\n// Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// array(1, 1)\n// >>> even_odd_count(123)\n// array(1, 2)\nfunction even_odd_count($num) {\n    $num = abs($num);\n    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n    return array($even, $odd);\n}\n?>"}
{"task_id": "HumanEval_80_is_happy", "generation": "<?php\n// You are given a string s.\n// Your task is to check if the string is happhp or not.\n// A string is happhp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy($s) {\n\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "prompt": "<?php\n// You are given a string s.\n// Your task is to check if the string is happhp or not.\n// A string is happhp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy($s) {\n", "wholecode": "<?php\n// You are given a string s.\n// Your task is to check if the string is happhp or not.\n// A string is happhp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\necho is_happy(\"a\") ? \"true\" : \"false\"; // false\necho \"\\n\";\necho is_happy(\"aa\") ? \"true\" : \"false\"; // false\necho \"\\n\";\necho is_happy(\"abcd\") ? \"true\" : \"false\"; // true\necho \"\\n\";\necho is_happy(\"aabb\") ? \"true\" : \"false\"; // false\necho \"\\n\";\necho is_happy(\"adb\") ? \"true\" : \"false\"; // true\necho \"\\n\";\necho is_happy(\"xyy\") ? \"true\" : \"false\"; // false\n?>"}
{"task_id": "HumanEval_59_largest_prime_factor", "generation": "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor($n) {\n\n    $max_prime = 1;\n    // Divide n by 2 to remove all even factors\n    while ($n % 2 == 0) {\n        $max_prime = 2;\n        $n /= 2;\n    }\n    // n must be odd at this point, so a skip of 2 (i += 2) can be used\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        // While i divides n, remove i and set max_prime to i\n        while ($n % $i == 0) {\n            $max_prime = $i;\n            $n /= $i;\n        }\n    }\n    // If n is a prime number greater than 2\n    if ($n > 2) {\n        $max_prime = $n;\n    }\n    return $max_prime;\n}\n", "prompt": "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor($n) {\n", "wholecode": "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor($n) {\n    $max_prime = 1;\n    // Divide n by 2 to remove all even factors\n    while ($n % 2 == 0) {\n        $max_prime = 2;\n        $n /= 2;\n    }\n    // n must be odd at this point, so a skip of 2 (i += 2) can be used\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        // While i divides n, remove i and set max_prime to i\n        while ($n % $i == 0) {\n            $max_prime = $i;\n            $n /= $i;\n        }\n    }\n    // If n is a prime number greater than 2\n    if ($n > 2) {\n        $max_prime = $n;\n    }\n    return $max_prime;\n}\n\n// Main function to test the generated function\nfunction main() {\n    echo largest_prime_factor(13195) . PHP_EOL; // Output: 29\n    echo largest_prime_factor(2048) . PHP_EOL;  // Output: 2\n}\n\n// Example usage:\nmain();\n?>"}
{"task_id": "HumanEval_66_digitSum", "generation": "<?php\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum($s) {\n\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i])) {\n            $sum += ord($s[$i]);\n        }\n    }\n    return $sum;\n}", "prompt": "<?php\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum($s) {\n", "wholecode": "<?php\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum($s) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i])) {\n            $sum += ord($s[$i]);\n        }\n    }\n    return $sum;\n}"}
{"task_id": "HumanEval_21_rescale_to_unit", "generation": "<?php\n// Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers) {\n\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array_map(function($num) use ($min, $range) {\n        return ($num - $min) / $range;\n    }, $numbers);\n    return $rescaled;\n}\n", "prompt": "<?php\n// Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers) {\n", "wholecode": "<?php\n// Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers) {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array_map(function($num) use ($min, $range) {\n        return ($num - $min) / $range;\n    }, $numbers);\n    return $rescaled;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check() {\n    $test_cases = array(\n        array(1.0, 2.0, 3.0, 4.0, 5.0) => array(0.0, 0.25, 0.5, 0.75, 1.0),\n        array(10.0, 20.0, 30.0, 40.0, 50.0) => array(0.0, 0.25, 0.5, 0.75, 1.0),\n        array(-5.0, 0.0, 5.0, 10.0, 15.0) => array(0.0, 0.25, 0.5, 0.75, 1.0)\n    );\n\n    foreach ($test_cases as $input => $expected) {\n        $output = rescale_to_unit($input);\n        if ($output !== $expected) {\n            echo \"Test failed for input \" . implode(\", \", $input) . \". Expected \" . implode(\", \", $expected) . \" but got \" . implode(\", \", $output) . \".\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the rescale_to_unit function\ncheck();\n?>"}
{"task_id": "HumanEval_121_solution", "generation": "<?php\n// Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution(array(5, 8, 7, 1))\n// 12\n// >>> solution(array(3, 3, 3, 3, 3))\n// 9\n// >>> solution(array(30, 13, 24, 321))\n// 0\nfunction solution($lst) {\n\n    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key % 2 == 0 && $value % 2 == 1) {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}", "prompt": "<?php\n// Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution(array(5, 8, 7, 1))\n// 12\n// >>> solution(array(3, 3, 3, 3, 3))\n// 9\n// >>> solution(array(30, 13, 24, 321))\n// 0\nfunction solution($lst) {\n", "wholecode": "<?php\n// Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution(array(5, 8, 7, 1))\n// 12\n// >>> solution(array(3, 3, 3, 3, 3))\n// 9\n// >>> solution(array(30, 13, 24, 321))\n// 0\nfunction solution($lst) {\n    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key % 2 == 0 && $value % 2 == 1) {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}"}
{"task_id": "HumanEval_68_pluck", "generation": "<?php\n// \"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n// array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0, 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n\n    $min = PHP_INT_MAX;\n    $index = -1;\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0 && $v < $min) {\n            $min = $v;\n            $index = $i;\n        }\n    }\n    return $index == -1 ? [] : [$min, $index];\n}", "prompt": "<?php\n// \"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n// array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0, 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n", "wholecode": "<?php\n// \"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n// array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0, 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n    $index = -1;\n    foreach ($arr as $i => $v) {\n        if ($v % 2 == 0 && $v < $min) {\n            $min = $v;\n            $index = $i;\n        }\n    }\n    return $index == -1 ? [] : [$min, $index];\n}"}
{"task_id": "HumanEval_147_get_max_triples", "generation": "<?php\n// You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 ‚â§ i ‚â§ n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples($n) {\n\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}", "prompt": "<?php\n// You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 ‚â§ i ‚â§ n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples($n) {\n", "wholecode": "<?php\n// You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 ‚â§ i ‚â§ n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples($n) {\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}\n?>"}
{"task_id": "HumanEval_110_exchange", "generation": "<?php\n// In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange(array(1, 2, 3, 4), array(1, 2, 3, 4))\n// \"YES\"\n// >>> exchange(array(1, 2, 3, 4), array(1, 5, 3, 4))\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange($lst1, $lst2) {\n\n    $oddCount = 0;\n    $evenCount = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 == 0) {\n            $evenCount++;\n        } else {\n            $oddCount++;\n        }\n    }\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $evenCount++;\n        } else {\n            $oddCount++;\n        }\n    }\n    if ($oddCount % 2 == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "prompt": "<?php\n// In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange(array(1, 2, 3, 4), array(1, 2, 3, 4))\n// \"YES\"\n// >>> exchange(array(1, 2, 3, 4), array(1, 5, 3, 4))\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange($lst1, $lst2) {\n", "wholecode": "<?php\n// In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange(array(1, 2, 3, 4), array(1, 2, 3, 4))\n// \"YES\"\n// >>> exchange(array(1, 2, 3, 4), array(1, 5, 3, 4))\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange($lst1, $lst2) {\n    $oddCount = 0;\n    $evenCount = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 == 0) {\n            $evenCount++;\n        } else {\n            $oddCount++;\n        }\n    }\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $evenCount++;\n        } else {\n            $oddCount++;\n        }\n    }\n    if ($oddCount % 2 == 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n?>"}
{"task_id": "HumanEval_47_median", "generation": "<?php\n// Return median of elements in the array l.\n// >>> median(array(3, 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction median($l) {\n\n    sort($l);\n    $count = count($l);\n    $mid = floor($count / 2);\n    if ($count % 2 == 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n    } else {\n        return $l[$mid];\n    }\n}\n", "prompt": "<?php\n// Return median of elements in the array l.\n// >>> median(array(3, 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction median($l) {\n", "wholecode": "<?php\n// Return median of elements in the array l.\n// >>> median(array(3, 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction median($l) {\n    sort($l);\n    $count = count($l);\n    $mid = floor($count / 2);\n    if ($count % 2 == 0) {\n        return ($l[$mid - 1] + $l[$mid]) / 2;\n    } else {\n        return $l[$mid];\n    }\n}\n\n// Return the maximum product of two distinct elements in the array l.\n// >>> maxProduct(array(3, 6, -2, -5, 7, 3))\n// 21\n// >>> maxProduct(array(3, 6, -2, -5, 7, 3, -1, 0, 9, 2))\n// 63\nfunction maxProduct($l) {\n    sort($l);\n    $count = count($l);\n    $max1 = $l[$count - 1];\n    $max2 = $l[$count - 2];\n    $min1 = $l[0];\n    $min2 = $l[1];\n    return max($max1 * $max2, $min1 * $min2);\n}\n\n// Return the maximum product of three distinct elements in the array l.\n// >>> maxProduct3(array(3, 6, -2, -5, 7, 3))\n// 126\n// >>> maxProduct3(array(3, 6, -2, -5, 7, 3, -1, 0, 9, 2))\n// 189\nfunction maxProduct3($l) {\n    sort($l);\n    $count = count($l);\n    $max1 = $l[$count - 1];\n    $max2 = $l[$count - 2];\n    $max3 = $l[$count - 3];\n    $min1 = $l[0];\n    $min2 = $l[1];\n    return max($max1 * $max2 * $max3, $min1 * $min2 * $max1);\n}\n\n// Return the maximum product of four distinct elements in the array l.\n// >>> maxProduct4(array(3, 6, -2, -5, 7, 3))\n// 126\n// >>> maxProduct4(array(3, 6, -2, -5, 7, 3,"}
{"task_id": "HumanEval_82_prime_length", "generation": "<?php\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length($string) {\n\n    $length = strlen($string);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}", "prompt": "<?php\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length($string) {\n", "wholecode": "<?php\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length($string) {\n    $length = strlen($string);\n    if ($length < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_73_smallest_change", "generation": "<?php\n// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change(array(1, 2, 3, 5, 4, 7, 9, 6))\n// 4\n// >>> smallest_change(array(1, 2, 3, 4, 3, 2, 2))\n// 1\n// >>> smallest_change(array(1, 2, 3, 2, 1))\n// 0\nfunction smallest_change($arr) {\n\n    $count = 0;\n    $left = 0;\n    $right = count($arr) - 1;\n    while ($left < $right) {\n        if ($arr[$left] != $arr[$right]) {\n            $count++;\n        }\n        $left++;\n        $right--;\n    }\n    return $count;\n}", "prompt": "<?php\n// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change(array(1, 2, 3, 5, 4, 7, 9, 6))\n// 4\n// >>> smallest_change(array(1, 2, 3, 4, 3, 2, 2))\n// 1\n// >>> smallest_change(array(1, 2, 3, 2, 1))\n// 0\nfunction smallest_change($arr) {\n", "wholecode": "<?php\n// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change(array(1, 2, 3, 5, 4, 7, 9, 6))\n// 4\n// >>> smallest_change(array(1, 2, 3, 4, 3, 2, 2))\n// 1\n// >>> smallest_change(array(1, 2, 3, 2, 1))\n// 0\nfunction smallest_change($arr) {\n    $count = 0;\n    $left = 0;\n    $right = count($arr) - 1;\n    while ($left < $right) {\n        if ($arr[$left] != $arr[$right]) {\n            $count++;\n        }\n        $left++;\n        $right--;\n    }\n    return $count;\n}\n?>"}
{"task_id": "HumanEval_133_sum_squares", "generation": "<?php\n// You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst(array(1.0, 2.0, 3.0))\n// 14\n// >>> lst(array(1.0, 4.0, 9.0))\n// 98\n// >>> lst(array(1.0, 3.0, 5.0, 7.0))\n// 84\n// >>> lst(array(1.4, 4.2, 0.0))\n// 29\n// >>> lst(array(-2.4, 1.0, 1.0))\n// 6\nfunction sum_squares($lst) {\n\n    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value) ** 2;\n    }\n    return $sum;\n}", "prompt": "<?php\n// You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst(array(1.0, 2.0, 3.0))\n// 14\n// >>> lst(array(1.0, 4.0, 9.0))\n// 98\n// >>> lst(array(1.0, 3.0, 5.0, 7.0))\n// 84\n// >>> lst(array(1.4, 4.2, 0.0))\n// 29\n// >>> lst(array(-2.4, 1.0, 1.0))\n// 6\nfunction sum_squares($lst) {\n", "wholecode": "<?php\n// You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst(array(1.0, 2.0, 3.0))\n// 14\n// >>> lst(array(1.0, 4.0, 9.0))\n// 98\n// >>> lst(array(1.0, 3.0, 5.0, 7.0))\n// 84\n// >>> lst(array(1.4, 4.2, 0.0))\n// 29\n// >>> lst(array(-2.4, 1.0, 1.0))\n// 6\nfunction sum_squares($lst) {\n    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value) ** 2;\n    }\n    return $sum;\n}"}
{"task_id": "HumanEval_141_file_name_check", "generation": "<?php\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check($file_name) {\n\n    $pattern = '/^[a-zA-Z][a-zA-Z0-9]*\\.[a-z]{3}$/';\n    if (preg_match($pattern, $file_name)) {\n        $parts = explode('.', $file_name);\n        $extension = strtolower($parts[1]);\n        if ($extension === 'txt' || $extension === 'exe' || $extension === 'dll') {\n            return 'Yes';\n        }\n    }\n    return 'No';\n}\n", "prompt": "<?php\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check($file_name) {\n", "wholecode": "<?php\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check($file_name) {\n    $pattern = '/^[a-zA-Z][a-zA-Z0-9]*\\.[a-z]{3}$/';\n    if (preg_match($pattern, $file_name)) {\n        $parts = explode('.', $file_name);\n        $extension = strtolower($parts[1]);\n        if ($extension === 'txt' || $extension === 'exe' || $extension === 'dll') {\n            return 'Yes';\n        }\n    }\n    return 'No';\n}\n\n// Test cases\necho file_name_check(\"example.txt\") . \"\\n\"; // Should output \"Yes\"\necho file_name_check(\"1example.dll\") . \"\\n\"; // Should output \"No\"\necho file_name_check(\"file123.exe\") . \"\\n\"; // Should output \"No\"\necho file_name_check(\"valid_file.txt\") . \"\\n\"; // Should output \"Yes\"\necho file_name_check(\"invalid_file.doc\") . \"\\n\"; // Should output \"No\"\n?>"}
{"task_id": "HumanEval_40_triples_sum_to_zero", "generation": "<?php\n// triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero(array(1, 3, 5, 0))\n// false\n// >>> triples_sum_to_zero(array(1, 3, -2, 1))\n// true\n// >>> triples_sum_to_zero(array(1, 2, 3, 7))\n// false\n// >>> triples_sum_to_zero(array(2, 4, -5, 3, 9, 7))\n// true\n// >>> triples_sum_to_zero(array(1))\n// false\nfunction triples_sum_to_zero($l) {\n\n    $n = count($l);\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "prompt": "<?php\n// triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero(array(1, 3, 5, 0))\n// false\n// >>> triples_sum_to_zero(array(1, 3, -2, 1))\n// true\n// >>> triples_sum_to_zero(array(1, 2, 3, 7))\n// false\n// >>> triples_sum_to_zero(array(2, 4, -5, 3, 9, 7))\n// true\n// >>> triples_sum_to_zero(array(1))\n// false\nfunction triples_sum_to_zero($l) {\n", "wholecode": "<?php\n// triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero(array(1, 3, 5, 0))\n// false\n// >>> triples_sum_to_zero(array(1, 3, -2, 1))\n// true\n// >>> triples_sum_to_zero(array(1, 2, 3, 7))\n// false\n// >>> triples_sum_to_zero(array(2, 4, -5, 3, 9, 7))\n// true\n// >>> triples_sum_to_zero(array(1))\n// false\nfunction triples_sum_to_zero($l) {\n    $n = count($l);\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check() {\n    $test_cases = array(\n        array(1, 3, 5, 0) => false,\n        array(1, 3, -2, 1) => true,\n        array(1, 2, 3, 7) => false,\n        array(2, 4, -5, 3, 9, 7) => true,\n        array(1) => false\n    );\n\n    foreach ($test_cases as $input => $expected) {\n        $result = triples_sum_to_zero($input);\n        if ($result !== $expected) {\n            echo \"Test failed for input \" . implode(\", \", $input) . \". Expected $expected, got $result.\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the triples_sum_to_zero function\ncheck();\n?>"}
{"task_id": "HumanEval_127_intersection", "generation": "<?php\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection(array(1, 2), array(2, 3))\n// \"NO\"\n// >>> intersection(array(-1, 1), array(0, 4))\n// \"NO\"\n// >>> intersection(array(-3, -1), array(-5, 5))\n// \"YES\"\nfunction intersection($interval1, $interval2) {\n\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "prompt": "<?php\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection(array(1, 2), array(2, 3))\n// \"NO\"\n// >>> intersection(array(-1, 1), array(0, 4))\n// \"NO\"\n// >>> intersection(array(-3, -1), array(-5, 5))\n// \"YES\"\nfunction intersection($interval1, $interval2) {\n", "wholecode": "<?php\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection(array(1, 2), array(2, 3))\n// \"NO\"\n// >>> intersection(array(-1, 1), array(0, 4))\n// \"NO\"\n// >>> intersection(array(-3, -1), array(-5, 5))\n// \"YES\"\nfunction intersection($interval1, $interval2) {\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n?>"}
{"task_id": "HumanEval_1_separate_paren_groups", "generation": "<?php\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string) {\n\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups = [];\n    $paren_stack = [];\n    $paren_group = '';\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $paren = $paren_string[$i];\n        if ($paren == '(') {\n            array_push($paren_stack, $paren);\n            $paren_group .= $paren;\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n            $paren_group .= $paren;\n            if (empty($paren_stack)) {\n                array_push($paren_groups, $paren_group);\n                $paren_group = '';\n            }\n        }\n    }\n    return $paren_groups;\n}", "prompt": "<?php\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string) {\n", "wholecode": "<?php\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string) {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups = [];\n    $paren_stack = [];\n    $paren_group = '';\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $paren = $paren_string[$i];\n        if ($paren == '(') {\n            array_push($paren_stack, $paren);\n            $paren_group .= $paren;\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n            $paren_group .= $paren;\n            if (empty($paren_stack)) {\n                array_push($paren_groups, $paren_group);\n                $paren_group = '';\n            }\n        }\n    }\n    return $paren_groups;\n}"}
{"task_id": "HumanEval_152_compare", "generation": "<?php\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game, $guess) {\n\n    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}", "prompt": "<?php\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game, $guess) {\n", "wholecode": "<?php\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game, $guess) {\n    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}"}
{"task_id": "HumanEval_83_starts_one_ends", "generation": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n\n    if ($n == 1) {\n        return 1;\n    } else {\n        return 9 * pow(10, $n - 2) + starts_one_ends($n - 1);\n    }\n}\n", "prompt": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n", "wholecode": "<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n == 1) {\n        return 1;\n    } else {\n        return 9 * pow(10, $n - 2) + starts_one_ends($n - 1);\n    }\n}\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start and end with 1.\nfunction starts_one_ends_one($n) {\n    if ($n == 1) {\n        return 1;\n    } else {\n        return 9 * pow(10, $n - 2) + starts_one_ends_one($n - 1);\n    }\n}\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start and end with 1.\nfunction starts_one_ends_one($n) {\n    if ($n == 1) {\n        return 1;\n    } else {\n        return 9 * pow(10, $n - 2) + starts_one_ends_one($n - 1);\n    }\n}\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start and end with 1.\nfunction starts_one_ends_one($n) {\n    if ($n == 1) {\n        return 1;\n    } else {\n        return 9 * pow(10, $n - 2) + starts_one_ends_one($n - 1);\n    }\n}\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start and end with 1.\nfunction starts_one_ends_one($n) {\n    if ($n == 1) {\n        return 1;\n    } else {\n        return 9 * pow(10, $n - 2) + starts_one_ends_one($n - 1);\n    }\n}\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start and end with 1.\nfunction starts_one_ends_one($n) {\n    if ($n == 1) {\n        return 1;\n    } else {\n        return 9 * pow(10, $n - 2) + starts_one_ends_one($n - 1);\n    }\n}\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start and end with 1.\n"}
{"task_id": "HumanEval_134_check_if_last_char_is_a_letter", "generation": "<?php\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter($txt) {\n\n    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n    $lastChar = substr($txt, -1);\n    return ctype_alpha($lastChar) && !ctype_alpha(substr($txt, -2, 1));\n}\n", "prompt": "<?php\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter($txt) {\n", "wholecode": "<?php\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter($txt) {\n    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n    $lastChar = substr($txt, -1);\n    return ctype_alpha($lastChar) && !ctype_alpha(substr($txt, -2, 1));\n}\n\n// Test cases\necho check_if_last_char_is_a_letter(\"apple pie\") ? \"true\" : \"false\"; // false\necho \"\\n\";\necho check_if_last_char_is_a_letter(\"apple pi e\") ? \"true\" : \"false\"; // true\necho \"\\n\";\necho check_if_last_char_is_a_letter(\"apple pi e \") ? \"true\" : \"false\"; // false\necho \"\\n\";\necho check_if_last_char_is_a_letter(\"\") ? \"true\" : \"false\"; // false\n?>"}
{"task_id": "HumanEval_124_valid_date", "generation": "<?php\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date($date) {\n\n    $date = explode('-', $date);\n    if (count($date) != 3) {\n        return false;\n    }\n    $month = $date[0];\n    $day = $date[1];\n    $year = $date[2];\n    if ($month < 1 || $month > 12) {\n        return false;\n    }\n    if ($day < 1 || $day > 31) {\n        return false;\n    }\n    if ($month == 2) {\n        if ($day > 29) {\n            return false;\n        }\n    } else if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n        if ($day > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n", "prompt": "<?php\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date($date) {\n", "wholecode": "<?php\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date($date) {\n    $date = explode('-', $date);\n    if (count($date) != 3) {\n        return false;\n    }\n    $month = $date[0];\n    $day = $date[1];\n    $year = $date[2];\n    if ($month < 1 || $month > 12) {\n        return false;\n    }\n    if ($day < 1 || $day > 31) {\n        return false;\n    }\n    if ($month == 2) {\n        if ($day > 29) {\n            return false;\n        }\n    } else if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n        if ($day > 30) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Unit tests\nfunction check() {\n    $testCases = [\n        [\"03-11-2000\", true],\n        [\"15-01-2012\", false],\n        [\"04-0-2040\", false],\n        [\"06-04-2020\", true],\n        [\"06/04/2020\", false],\n    ];\n    foreach ($testCases as $testCase) {\n        $result = valid_date($testCase[0]);\n        $expected = $testCase[1];\n        assert($result === $expected, \"Failed on {$testCase[0]}: expected {$expected}, got {$result}\");\n    }\n    echo \"All tests passed!\";\n}\n\ncheck();\n?>"}
{"task_id": "HumanEval_108_count_nums", "generation": "<?php\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>> count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n// 3\nfunction count_nums($arr) {\n\n    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}", "prompt": "<?php\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>> count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n// 3\nfunction count_nums($arr) {\n", "wholecode": "<?php\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>> count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n// 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n?>"}
{"task_id": "HumanEval_86_anti_shuffle", "generation": "<?php\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n        $chars = str_split($word);\n        sort($chars);\n        $result[] = implode('', $chars);\n    }\n    return implode(' ', $result);\n}", "prompt": "<?php\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n", "wholecode": "<?php\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n        $chars = str_split($word);\n        sort($chars);\n        $result[] = implode('', $chars);\n    }\n    return implode(' ', $result);\n}"}
{"task_id": "HumanEval_48_is_palindrome", "generation": "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text) {\n\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-z0-9]/', '', $text);\n    return $text === strrev($text);\n}\n", "prompt": "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text) {\n", "wholecode": "<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text) {\n    $text = strtolower($text);\n    $text = preg_replace('/[^a-z0-9]/', '', $text);\n    return $text === strrev($text);\n}\n\n// Check function to verify the correctness of the is_palindrome function\nfunction check_palindrome() {\n    $test_cases = array(\n        \"\" => true,\n        \"aba\" => true,\n        \"aaaaa\" => true,\n        \"zbcd\" => false,\n        \"A man, a plan, a canal, Panama!\" => true,\n        \"No lemon, no melon\" => true\n    );\n\n    foreach ($test_cases as $input => $expected) {\n        $result = is_palindrome($input);\n        if ($result !== $expected) {\n            echo \"Test failed for input '$input'. Expected $expected, got $result.\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the is_palindrome function\ncheck_palindrome();\n?>"}
{"task_id": "HumanEval_118_get_closest_vowel", "generation": "<?php\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $word = strtolower($word);\n    $closestVowel = '';\n    $distance = PHP_INT_MAX;\n    $length = strlen($word);\n    for ($i = $length - 1; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            for ($j = $i - 1; $j >= 0; $j--) {\n                if (!in_array($word[$j], $vowels)) {\n                    $currentDistance = $i - $j;\n                    if ($currentDistance < $distance) {\n                        $distance = $currentDistance;\n                        $closestVowel = $word[$i];\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return $closestVowel;\n}", "prompt": "<?php\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n", "wholecode": "<?php\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $word = strtolower($word);\n    $closestVowel = '';\n    $distance = PHP_INT_MAX;\n    $length = strlen($word);\n    for ($i = $length - 1; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            for ($j = $i - 1; $j >= 0; $j--) {\n                if (!in_array($word[$j], $vowels)) {\n                    $currentDistance = $i - $j;\n                    if ($currentDistance < $distance) {\n                        $distance = $currentDistance;\n                        $closestVowel = $word[$i];\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return $closestVowel;\n}\n?>"}
{"task_id": "HumanEval_31_is_prime", "generation": "<?php\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime($n) {\n\n    if ($n <= 1) {\n        return false;\n    }\n    if ($n <= 3) {\n        return true;\n    }\n    if ($n % 2 == 0 || $n % 3 == 0) {\n        return false;\n    }\n    $i = 5;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0 || $n % ($i + 2) == 0) {\n            return false;\n        }\n        $i += 6;\n    }\n    return true;\n}\n", "prompt": "<?php\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime($n) {\n", "wholecode": "<?php\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime($n) {\n    if ($n <= 1) {\n        return false;\n    }\n    if ($n <= 3) {\n        return true;\n    }\n    if ($n % 2 == 0 || $n % 3 == 0) {\n        return false;\n    }\n    $i = 5;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0 || $n % ($i + 2) == 0) {\n            return false;\n        }\n        $i += 6;\n    }\n    return true;\n}\n\n// Main function to test the generated function\nfunction main() {\n    $testCases = [6, 101, 11, 13441, 61, 4, 1];\n    foreach ($testCases as $testCase) {\n        echo \"is_prime($testCase): \" . (is_prime($testCase) ? \"true\" : \"false\") . PHP_EOL;\n    }\n}\n\n// Example usage:\nmain();\n?>"}
{"task_id": "HumanEval_144_simplify", "generation": "<?php\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x, $n) {\n\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0] / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return $result == round($result);\n}", "prompt": "<?php\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x, $n) {\n", "wholecode": "<?php\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x, $n) {\n    $x = explode('/', $x);\n    $n = explode('/', $n);\n    $x = $x[0] / $x[1];\n    $n = $n[0] / $n[1];\n    $result = $x * $n;\n    return $result == round($result);\n}"}
{"task_id": "HumanEval_78_hex_key", "generation": "<?php\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key($num) {\n\n    $primes = ['2', '3', '5', '7', 'B', 'D'];\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}", "prompt": "<?php\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key($num) {\n", "wholecode": "<?php\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key($num) {\n    $primes = ['2', '3', '5', '7', 'B', 'D'];\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        if (in_array($num[$i], $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}"}
{"task_id": "HumanEval_143_words_in_sentence", "generation": "<?php\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence) {\n\n    $words = explode(\" \", $sentence);\n    $prime_words = array_filter($words, function($word) {\n        return is_prime(strlen($word));\n    });\n    return implode(\" \", $prime_words);\n}", "prompt": "<?php\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence) {\n", "wholecode": "<?php\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence) {\n    $words = explode(\" \", $sentence);\n    $prime_words = array_filter($words, function($word) {\n        return is_prime(strlen($word));\n    });\n    return implode(\" \", $prime_words);\n}\nfunction is_prime($num) {\n    if ($num <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n?>"}
{"task_id": "HumanEval_111_histogram", "generation": "<?php\n// Given a string representing a space separated lowercase letters, return an array\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\")\n// array()\nfunction histogram($test) {\n\n    $arr = explode(\" \", $test);\n    $histogram = array();\n    foreach ($arr as $letter) {\n        if (array_key_exists($letter, $histogram)) {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter] = 1;\n        }\n    }\n    return $histogram;\n}", "prompt": "<?php\n// Given a string representing a space separated lowercase letters, return an array\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\")\n// array()\nfunction histogram($test) {\n", "wholecode": "<?php\n// Given a string representing a space separated lowercase letters, return an array\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\")\n// array()\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n    $histogram = array();\n    foreach ($arr as $letter) {\n        if (array_key_exists($letter, $histogram)) {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter] = 1;\n        }\n    }\n    return $histogram;\n}"}
{"task_id": "HumanEval_87_get_row", "generation": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n\n    $result = array();\n    foreach ($lst as $row => $row_data) {\n        foreach ($row_data as $col => $value) {\n            if ($value == $x) {\n                $result[] = array($row, $col);\n            }\n        }\n    }\n    usort($result, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        } else {\n            return $a[0] - $b[0];\n        }\n    });\n    return $result;\n}", "prompt": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n", "wholecode": "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n    foreach ($lst as $row => $row_data) {\n        foreach ($row_data as $col => $value) {\n            if ($value == $x) {\n                $result[] = array($row, $col);\n            }\n        }\n    }\n    usort($result, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        } else {\n            return $a[0] - $b[0];\n        }\n    });\n    return $result;\n}"}
{"task_id": "HumanEval_123_get_odd_collatz", "generation": "<?php\n// Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// array(1, 5)\nfunction get_odd_collatz($n) {\n\n    $collatz = array();\n    while ($n != 1) {\n        $collatz[] = $n;\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = 3 * $n + 1;\n        }\n    }\n    $collatz[] = 1;\n    $odd_collatz = array();\n    foreach ($collatz as $num) {\n        if ($num % 2 != 0) {\n            $odd_collatz[] = $num;\n        }\n    }\n    sort($odd_collatz);\n    return $odd_collatz;\n}", "prompt": "<?php\n// Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// array(1, 5)\nfunction get_odd_collatz($n) {\n", "wholecode": "<?php\n// Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// array(1, 5)\nfunction get_odd_collatz($n) {\n    $collatz = array();\n    while ($n != 1) {\n        $collatz[] = $n;\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = 3 * $n + 1;\n        }\n    }\n    $collatz[] = 1;\n    $odd_collatz = array();\n    foreach ($collatz as $num) {\n        if ($num % 2 != 0) {\n            $odd_collatz[] = $num;\n        }\n    }\n    sort($odd_collatz);\n    return $odd_collatz;\n}"}
{"task_id": "HumanEval_135_can_arrange", "generation": "<?php\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange(array(1, 2, 4, 3, 5))\n// 3\n// >>> can_arrange(array(1, 2, 3))\n// -1\nfunction can_arrange($arr) {\n\n    $max = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max = $i;\n        }\n    }\n    return $max;\n}", "prompt": "<?php\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange(array(1, 2, 4, 3, 5))\n// 3\n// >>> can_arrange(array(1, 2, 3))\n// -1\nfunction can_arrange($arr) {\n", "wholecode": "<?php\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange(array(1, 2, 4, 3, 5))\n// 3\n// >>> can_arrange(array(1, 2, 3))\n// -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max = $i;\n        }\n    }\n    return $max;\n}\n?>"}
{"task_id": "HumanEval_19_sort_numbers", "generation": "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers($numbers) {\n\n    $numberMap = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    ];\n    $numberArray = explode(' ', $numbers);\n    usort($numberArray, function($a, $b) use ($numberMap) {\n        return $numberMap[$a] - $numberMap[$b];\n    });\n    return implode(' ', $numberArray);\n}\n", "prompt": "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers($numbers) {\n", "wholecode": "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers($numbers) {\n    $numberMap = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    ];\n    $numberArray = explode(' ', $numbers);\n    usort($numberArray, function($a, $b) use ($numberMap) {\n        return $numberMap[$a] - $numberMap[$b];\n    });\n    return implode(' ', $numberArray);\n}\n\n// Check function to verify the correctness of the generated function\nfunction check() {\n    $testCases = [\n        [\"three one five\", \"one three five\"],\n        [\"nine eight seven\", \"seven eight nine\"],\n        [\"zero four two\", \"zero two four\"],\n        [\"six three nine one\", \"one three six nine\"],\n        [\"five five five\", \"five five five\"]\n    ];\n    foreach ($testCases as $testCase) {\n        $input = $testCase[0];\n        $expected = $testCase[1];\n        $result = sort_numbers($input);\n        if ($result !== $expected) {\n            echo \"Test failed for input '$input'. Expected '$expected', got '$result'.\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the sort_numbers function\ncheck();\n?>"}
{"task_id": "HumanEval_65_circular_shift", "generation": "<?php\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n\n    $str = (string)$x;\n    $len = strlen($str);\n    $shift %= $len; // To handle shifts larger than the number of digits\n    if ($shift == 0) {\n        return $str;\n    }\n    $shifted = substr($str, -$shift) . substr($str, 0, $len - $shift);\n    return $shifted;\n}\n", "prompt": "<?php\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n", "wholecode": "<?php\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n    $str = (string)$x;\n    $len = strlen($str);\n    $shift %= $len; // To handle shifts larger than the number of digits\n    if ($shift == 0) {\n        return $str;\n    }\n    $shifted = substr($str, -$shift) . substr($str, 0, $len - $shift);\n    return $shifted;\n}\n\n// Check function to verify the correctness of the circular_shift function\nfunction check() {\n    $testCases = [\n        ['input' => [12, 1], 'expected' => '21'],\n        ['input' => [12, 2], 'expected' => '12'],\n        ['input' => [12345, 3], 'expected' => '45123'],\n        ['input' => [12345, 5], 'expected' => '12345'],\n        ['input' => [12345, 6], 'expected' => '54321'],\n    ];\n\n    foreach ($testCases as $case) {\n        $result = circular_shift($case['input'][0], $case['input'][1]);\n        if ($result !== $case['expected']) {\n            echo \"Test failed for input \" . implode(\", \", $case['input']) . \". Expected \" . $case['expected'] . \" but got \" . $result . \".\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed.\\n\";\n}\n\n// Run the check function to verify the correctness of the circular_shift function\ncheck();\n?>"}
{"task_id": "HumanEval_142_sum_squares", "generation": "<?php\n// \"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// array(1, 2, 3)\n// >>> lst\n// array()\n// >>> lst\n// array(-1, -5, 2, -1, -5)\nfunction sum_squares($lst) {\n\n    $sum = 0;\n    foreach ($lst as $index => $value) {\n        if ($index % 3 == 0) {\n            $sum += $value * $value;\n        } elseif ($index % 4 == 0) {\n            $sum += $value * $value * $value;\n        } else {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}", "prompt": "<?php\n// \"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// array(1, 2, 3)\n// >>> lst\n// array()\n// >>> lst\n// array(-1, -5, 2, -1, -5)\nfunction sum_squares($lst) {\n", "wholecode": "<?php\n// \"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// array(1, 2, 3)\n// >>> lst\n// array()\n// >>> lst\n// array(-1, -5, 2, -1, -5)\nfunction sum_squares($lst) {\n    $sum = 0;\n    foreach ($lst as $index => $value) {\n        if ($index % 3 == 0) {\n            $sum += $value * $value;\n        } elseif ($index % 4 == 0) {\n            $sum += $value * $value * $value;\n        } else {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}\n?>"}
{"task_id": "HumanEval_94_skjkasdkd", "generation": "<?php\n// You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))\n// 10\n// >>> skjkasdkd(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))\n// 25\n// >>> skjkasdkd(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))\n// 13\n// >>> skjkasdkd(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))\n// 11\n// >>> skjkasdkd(array(0, 81, 12, 3, 1, 21))\n// 3\n// >>> skjkasdkd(array(0, 8, 1, 2, 1, 7))\n// 7\nfunction skjkasdkd($lst) {\n\n    $maxPrime = 0;\n    foreach ($lst as $num) {\n        if (isPrime($num) && $num > $maxPrime) {\n            $maxPrime = $num;\n        }\n    }\n    return $maxPrime ? array_sum(str_split($maxPrime)) : 0;\n}", "prompt": "<?php\n// You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))\n// 10\n// >>> skjkasdkd(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))\n// 25\n// >>> skjkasdkd(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))\n// 13\n// >>> skjkasdkd(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))\n// 11\n// >>> skjkasdkd(array(0, 81, 12, 3, 1, 21))\n// 3\n// >>> skjkasdkd(array(0, 8, 1, 2, 1, 7))\n// 7\nfunction skjkasdkd($lst) {\n", "wholecode": "<?php\n// You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))\n// 10\n// >>> skjkasdkd(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))\n// 25\n// >>> skjkasdkd(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))\n// 13\n// >>> skjkasdkd(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))\n// 11\n// >>> skjkasdkd(array(0, 81, 12, 3, 1, 21))\n// 3\n// >>> skjkasdkd(array(0, 8, 1, 2, 1, 7))\n// 7\nfunction skjkasdkd($lst) {\n    $maxPrime = 0;\n    foreach ($lst as $num) {\n        if (isPrime($num) && $num > $maxPrime) {\n            $maxPrime = $num;\n        }\n    }\n    return $maxPrime ? array_sum(str_split($maxPrime)) : 0;\n}\nfunction isPrime($num) {\n    if ($num < 2) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n?>"}
{"task_id": "HumanEval_8_sum_product", "generation": "<?php\n// For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product(array())\n// array(0, 1)\n// >>> sum_product(array(1, 2, 3, 4))\n// array(10, 24)\nfunction sum_product($numbers) {\n\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n}\n", "prompt": "<?php\n// For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product(array())\n// array(0, 1)\n// >>> sum_product(array(1, 2, 3, 4))\n// array(10, 24)\nfunction sum_product($numbers) {\n", "wholecode": "<?php\n// For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product(array())\n// array(0, 1)\n// >>> sum_product(array(1, 2, 3, 4))\n// array(10, 24)\nfunction sum_product($numbers) {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n}\n\n// Check function to verify the correctness of the generated function\nfunction check() {\n    $testCases = array(\n        array('input' => array(), 'expected' => array(0, 1)),\n        array('input' => array(1, 2, 3, 4), 'expected' => array(10, 24)),\n        array('input' => array(-1, -2, -3, -4), 'expected' => array(-10, 24)),\n        array('input' => array(0, 0, 0, 0), 'expected' => array(0, 0)),\n    );\n\n    foreach ($testCases as $testCase) {\n        $result = sum_product($testCase['input']);\n        if ($result !== $testCase['expected']) {\n            echo \"Test failed for input \" . implode(\", \", $testCase['input']) . \". Expected \" . implode(\", \", $testCase['expected']) . \" but got \" . implode(\", \", $result) . \".\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the sum_product function\ncheck();\n?>"}
{"task_id": "HumanEval_102_choose_num", "generation": "<?php\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num($x, $y) {\n\n    if ($x > $y) {\n        return -1;\n    }\n    for ($i = $y; $i >= $x; $i--) {\n        if ($i % 2 == 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", "prompt": "<?php\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num($x, $y) {\n", "wholecode": "<?php\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    for ($i = $y; $i >= $x; $i--) {\n        if ($i % 2 == 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n\n// This function takes two positive numbers x and y and returns the\n// smallest odd integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 13\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 != 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n\n// This function takes two positive numbers x and y and returns the\n// biggest odd integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 15\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    for ($i = $y; $i >= $x; $i--) {\n        if ($i % 2 != 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n\n// This function takes two positive numbers x and y and returns the\n// smallest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 12\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num($x, $y) {\n    if ($x > $y) {\n        return -1;\n    }\n    for ($i = $x; $i <= $y; $i"}
{"task_id": "HumanEval_136_largest_smallest_integers", "generation": "<?php\n// Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n// array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n// >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst) {\n\n    $negatives = array_filter($lst, function($x) { return $x < 0; });\n    $positives = array_filter($lst, function($x) { return $x > 0; });\n    return array(\n        empty($negatives) ? null : max($negatives),\n        empty($positives) ? null : min($positives)\n    );\n}", "prompt": "<?php\n// Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n// array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n// >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst) {\n", "wholecode": "<?php\n// Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n// array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n// >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst) {\n    $negatives = array_filter($lst, function($x) { return $x < 0; });\n    $positives = array_filter($lst, function($x) { return $x > 0; });\n    return array(\n        empty($negatives) ? null : max($negatives),\n        empty($positives) ? null : min($positives)\n    );\n}"}
{"task_id": "HumanEval_16_count_distinct_characters", "generation": "<?php\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters($string) {\n\n    $string = strtolower($string);\n    $characters = str_split($string);\n    $distinctCharacters = array_unique($characters);\n    return count($distinctCharacters);\n}\n", "prompt": "<?php\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters($string) {\n", "wholecode": "<?php\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters($string) {\n    $string = strtolower($string);\n    $characters = str_split($string);\n    $distinctCharacters = array_unique($characters);\n    return count($distinctCharacters);\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($string, $expected) {\n    $result = count_distinct_characters($string);\n    if ($result === $expected) {\n        echo \"PASS: The string '$string' has $result distinct characters.\\n\";\n    } else {\n        echo \"FAIL: The string '$string' was expected to have $expected distinct characters, but it has $result.\\n\";\n    }\n}\n\n// Provided data points\ncheck(\"xyzXYZ\", 3);\ncheck(\"Jerry\", 4);\ncheck(\"HelloWorld\", 7);\ncheck(\"PHP\", 3);\n?>"}
{"task_id": "HumanEval_100_make_a_pile", "generation": "<?php\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n) {\n\n    $pile = array();\n    $current = $n;\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $current;\n        $current += $n % 2 == 0 ? 2 : 1;\n    }\n    return $pile;\n}", "prompt": "<?php\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n) {\n", "wholecode": "<?php\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n) {\n    $pile = array();\n    $current = $n;\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $current;\n        $current += $n % 2 == 0 ? 2 : 1;\n    }\n    return $pile;\n}\n?>"}
{"task_id": "HumanEval_128_prod_signs", "generation": "<?php\n// You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return null for empty arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0, 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n\n    if (empty($arr)) {\n        return null;\n    }\n    $product = 1;\n    $sum = 0;\n    foreach ($arr as $num) {\n        $product *= $num > 0 ? 1 : ($num < 0 ? -1 : 0);\n        $sum += abs($num);\n    }\n    return $product * $sum;\n}", "prompt": "<?php\n// You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return null for empty arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0, 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n", "wholecode": "<?php\n// You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return null for empty arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0, 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    $product = 1;\n    $sum = 0;\n    foreach ($arr as $num) {\n        $product *= $num > 0 ? 1 : ($num < 0 ? -1 : 0);\n        $sum += abs($num);\n    }\n    return $product * $sum;\n}"}
{"task_id": "HumanEval_114_minSubArraySum", "generation": "<?php\n// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum(array(2, 3, 4, 1, 2, 4))\n// 1\n// >>> minSubArraySum(array(-1, -2, -3))\n// -6\nfunction minSubArraySum($nums) {\n\n    $minSum = PHP_INT_MAX;\n    $currentSum = 0;\n    foreach ($nums as $num) {\n        $currentSum = min($num, $currentSum + $num);\n        $minSum = min($minSum, $currentSum);\n    }\n    return $minSum;\n}", "prompt": "<?php\n// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum(array(2, 3, 4, 1, 2, 4))\n// 1\n// >>> minSubArraySum(array(-1, -2, -3))\n// -6\nfunction minSubArraySum($nums) {\n", "wholecode": "<?php\n// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum(array(2, 3, 4, 1, 2, 4))\n// 1\n// >>> minSubArraySum(array(-1, -2, -3))\n// -6\nfunction minSubArraySum($nums) {\n    $minSum = PHP_INT_MAX;\n    $currentSum = 0;\n    foreach ($nums as $num) {\n        $currentSum = min($num, $currentSum + $num);\n        $minSum = min($minSum, $currentSum);\n    }\n    return $minSum;\n}"}
{"task_id": "HumanEval_15_string_sequence", "generation": "<?php\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence($n) {\n\n    $sequence = \"\";\n    for ($i = 0; $i <= $n; $i++) {\n        $sequence .= $i . \" \";\n    }\n    return trim($sequence);\n}\n", "prompt": "<?php\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence($n) {\n", "wholecode": "<?php\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence($n) {\n    $sequence = \"\";\n    for ($i = 0; $i <= $n; $i++) {\n        $sequence .= $i . \" \";\n    }\n    return trim($sequence);\n}\n\n// Main function to test the generated function\nfunction main() {\n    $testCases = array(\n        0 => \"0\",\n        5 => \"0 1 2 3 4 5\",\n        10 => \"0 1 2 3 4 5 6 7 8 9 10\"\n    );\n\n    foreach ($testCases as $input => $expectedOutput) {\n        $output = string_sequence($input);\n        assert($output === $expectedOutput, \"Test failed for input $input. Expected '$expectedOutput', got '$output'\");\n        echo \"Test passed for input $input. Output: '$output'\\n\";\n    }\n}\n\nmain();\n?>"}
{"task_id": "HumanEval_154_cycpattern_check", "generation": "<?php\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check($a, $b) {\n\n    $b = $b . $b;\n    return strpos($a, $b) !== false;\n}\n\nvar_dump(cycpattern_check(\"abcd\", \"abd\"));\nvar_dump(cycpattern_check(\"hello\", \"ell\"));\nvar_dump(cycpattern_check(\"whassup\", \"psus\"));\nvar_dump(cycpattern_check(\"abab\", \"baa\"));\nvar_dump(cycpattern_check(\"efef\", \"eeff\"));\nvar_dump(cycpattern_check(\"himenss\", \"simen\"));", "prompt": "<?php\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check($a, $b) {\n", "wholecode": "<?php\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check($a, $b) {\n    $b = $b . $b;\n    return strpos($a, $b) !== false;\n}\n\nvar_dump(cycpattern_check(\"abcd\", \"abd\"));\nvar_dump(cycpattern_check(\"hello\", \"ell\"));\nvar_dump(cycpattern_check(\"whassup\", \"psus\"));\nvar_dump(cycpattern_check(\"abab\", \"baa\"));\nvar_dump(cycpattern_check(\"efef\", \"eeff\"));\nvar_dump(cycpattern_check(\"himenss\", \"simen\"));"}
{"task_id": "HumanEval_57_monotonic", "generation": "<?php\n// Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4, 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l) {\n\n    $n = count($l);\n    if ($n <= 2) {\n        return true;\n    }\n    $d = $l[1] - $l[0];\n    for ($i = 2; $i < $n; $i++) {\n        $x = $l[$i] - $l[$i - 1];\n        if ($d == 0) {\n            $d = $x;\n        } else if ($d > 0) {\n            if ($x < 0) {\n                return false;\n            }\n        } else if ($x > 0) {\n            return false;\n        }\n    }\n    return true;\n}", "prompt": "<?php\n// Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4, 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l) {\n", "wholecode": "<?php\n// Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4, 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l) {\n    $n = count($l);\n    if ($n <= 2) {\n        return true;\n    }\n    $d = $l[1] - $l[0];\n    for ($i = 2; $i < $n; $i++) {\n        $x = $l[$i] - $l[$i - 1];\n        if ($d == 0) {\n            $d = $x;\n        } else if ($d > 0) {\n            if ($x < 0) {\n                return false;\n            }\n        } else if ($x > 0) {\n            return false;\n        }\n    }\n    return true;\n}"}
{"task_id": "HumanEval_12_longest", "generation": "<?php\n// Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return null in case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n// \"ccc\"\nfunction longest($strings) {\n\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "prompt": "<?php\n// Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return null in case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n// \"ccc\"\nfunction longest($strings) {\n", "wholecode": "<?php\n// Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return null in case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n// \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n// Out of array of strings, return the shortest one. Return the first one in case of multiple\n// strings of the same length. Return null in case the input array is empty.\n// >>> shortest(array())\n// null\n// >>> shortest(array(\"a\", \"b\", \"c\"))\n// \"a\"\n// >>> shortest(array(\"a\", \"bb\", \"ccc\"))\n// \"a\"\nfunction shortest($strings) {\n    if (empty($strings)) {\n        return null;\n    }\n    $shortest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string) < strlen($shortest)) {\n            $shortest = $string;\n        }\n    }\n    return $shortest;\n}\n\n// Out of array of strings, return the one that contains the most vowels. Return the first one in case of multiple\n// strings of the same length. Return null in case the input array is empty.\n// >>> mostVowels(array())\n// null\n// >>> mostVowels(array(\"a\", \"b\", \"c\"))\n// \"a\"\n// >>> mostVowels(array(\"a\", \"bb\", \"ccc\"))\n// \"a\"\n// >>> mostVowels(array(\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"))\n// \"eeeee\"\nfunction mostVowels($strings) {\n    if (empty($strings)) {\n        return null;\n    }\n    $mostVowels = $strings[0];\n    foreach ($strings as $string) {\n        if (countVowels($string) > countVowels($mostVowels)) {\n            $mostVowels = $string;\n        }\n    }\n    return $mostVowels;\n}\n\n// Out of array of strings, return the one that contains the least vowels. Return the first one in case of multiple\n// strings of the same length. Return null in case the input array is empty.\n// >>> leastVowels(array())\n// null\n// >>> leastVowels(array(\"a\", \"b\", \"c\"))\n// \"b"}
{"task_id": "HumanEval_52_below_threshold", "generation": "<?php\n// Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold(array(1, 2, 4, 10), 100)\n// true\n// >>> below_threshold(array(1, 20, 4, 10), 5)\n// false\nfunction below_threshold($l, $t) {\n\n    foreach ($l as $num) {\n        if ($num >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "prompt": "<?php\n// Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold(array(1, 2, 4, 10), 100)\n// true\n// >>> below_threshold(array(1, 20, 4, 10), 5)\n// false\nfunction below_threshold($l, $t) {\n", "wholecode": "<?php\n// Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold(array(1, 2, 4, 10), 100)\n// true\n// >>> below_threshold(array(1, 20, 4, 10), 5)\n// false\nfunction below_threshold($l, $t) {\n    foreach ($l as $num) {\n        if ($num >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Check function to verify the correctness of the below_threshold function.\nfunction check() {\n    $testCases = array(\n        array('input' => array(1, 2, 4, 10), 'threshold' => 100, 'expected' => true),\n        array('input' => array(1, 20, 4, 10), 'threshold' => 5, 'expected' => false),\n        array('input' => array(100, 200, 300), 'threshold' => 250, 'expected' => false),\n        array('input' => array(1, 2, 3, 4), 'threshold' => 5, 'expected' => true),\n    );\n\n    foreach ($testCases as $testCase) {\n        $result = below_threshold($testCase['input'], $testCase['threshold']);\n        if ($result !== $testCase['expected']) {\n            echo \"Test failed for input: \" . implode(\", \", $testCase['input']) . \" with threshold: \" . $testCase['threshold'] . \"\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the below_threshold function.\ncheck();\n?>"}
{"task_id": "HumanEval_75_is_multiply_prime", "generation": "<?php\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime($a) {\n\n    $primes = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    $count = 0;\n    foreach ($primes as $prime) {\n        if ($a % $prime == 0) {\n            $count++;\n            $a /= $prime;\n        }\n    }\n    return $count == 3 && $a == 1;\n}", "prompt": "<?php\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime($a) {\n", "wholecode": "<?php\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime($a) {\n    $primes = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    $count = 0;\n    foreach ($primes as $prime) {\n        if ($a % $prime == 0) {\n            $count++;\n            $a /= $prime;\n        }\n    }\n    return $count == 3 && $a == 1;\n}\n?>"}
{"task_id": "HumanEval_30_get_positive", "generation": "<?php\n// Return only positive numbers in the array.\n// >>> get_positive(array(-1, 2, -4, 5, 6))\n// array(2, 5, 6)\n// >>> get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l) {\n\n    $result = array();\n    foreach ($l as $value) {\n        if ($value > 0) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n", "prompt": "<?php\n// Return only positive numbers in the array.\n// >>> get_positive(array(-1, 2, -4, 5, 6))\n// array(2, 5, 6)\n// >>> get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l) {\n", "wholecode": "<?php\n// Return only positive numbers in the array.\n// >>> get_positive(array(-1, 2, -4, 5, 6))\n// array(2, 5, 6)\n// >>> get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l) {\n    $result = array();\n    foreach ($l as $value) {\n        if ($value > 0) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n// Return only negative numbers in the array.\n// >>> get_negative(array(4, -3, 2, 1, -2, -4))\n// array(-3, -2, -4)\n// >>> get_negative(array(-5, 3, 2, -1, -7, -8))\n// array(-5, -1, -7, -8)\nfunction get_negative($l) {\n    $result = array();\n    foreach ($l as $value) {\n        if ($value < 0) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n// Return only even numbers in the array.\n// >>> get_even(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n// array(2, 4, 6, 8, 10)\n// >>> get_even(array(10, 15, 20, 25, 30, 35, 40))\n// array(10, 20, 30, 40)\nfunction get_even($l) {\n    $result = array();\n    foreach ($l as $value) {\n        if ($value % 2 == 0) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n// Return only odd numbers in the array.\n// >>> get_odd(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n// array(1, 3, 5, 7, 9)\n// >>> get_odd(array(11, 22, 33, 44, 55, 66, 77, 88, 99, 100))\n// array(11, 33, 55, 77, 99)\nfunction get_odd($l) {\n    $result = array();\n    foreach ($l as $value) {\n        if ($value % 2 != 0)"}
{"task_id": "HumanEval_33_sort_third", "generation": "<?php\n// This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third(array(1, 2, 3))\n// array(1, 2, 3)\n// >>> sort_third(array(5, 6, 3, 4, 8, 9, 2))\n// array(2, 6, 3, 4, 8, 9, 5)\nfunction sort_third($l) {\n\n    $thirds = array();\n    $others = array();\n    foreach ($l as $i => $v) {\n        if ($i % 3 == 0) {\n            $thirds[] = $v;\n        } else {\n            $others[] = $v;\n        }\n    }\n    sort($thirds);\n    $result = array();\n    $thirds_i = 0;\n    $others_i = 0;\n    foreach ($l as $i => $v) {\n        if ($i % 3 == 0) {\n            $result[] = $thirds[$thirds_i++];\n        } else {\n            $result[] = $others[$others_i++];\n        }\n    }\n    return $result;\n}", "prompt": "<?php\n// This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third(array(1, 2, 3))\n// array(1, 2, 3)\n// >>> sort_third(array(5, 6, 3, 4, 8, 9, 2))\n// array(2, 6, 3, 4, 8, 9, 5)\nfunction sort_third($l) {\n", "wholecode": "<?php\n// This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third(array(1, 2, 3))\n// array(1, 2, 3)\n// >>> sort_third(array(5, 6, 3, 4, 8, 9, 2))\n// array(2, 6, 3, 4, 8, 9, 5)\nfunction sort_third($l) {\n    $thirds = array();\n    $others = array();\n    foreach ($l as $i => $v) {\n        if ($i % 3 == 0) {\n            $thirds[] = $v;\n        } else {\n            $others[] = $v;\n        }\n    }\n    sort($thirds);\n    $result = array();\n    $thirds_i = 0;\n    $others_i = 0;\n    foreach ($l as $i => $v) {\n        if ($i % 3 == 0) {\n            $result[] = $thirds[$thirds_i++];\n        } else {\n            $result[] = $others[$others_i++];\n        }\n    }\n    return $result;\n}"}
{"task_id": "HumanEval_6_parse_nested_parens", "generation": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n\n    $groups = explode(\" \", $paren_string);\n    $maxDepths = array();\n\n    foreach ($groups as $group) {\n        $maxDepth = 0;\n        $currentDepth = 0;\n\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n                $currentDepth++;\n                if ($currentDepth > $maxDepth) {\n                    $maxDepth = $currentDepth;\n                }\n            } elseif ($group[$i] == ')') {\n                $currentDepth--;\n            }\n        }\n\n        array_push($maxDepths, $maxDepth);\n    }\n\n    return $maxDepths;\n}\n", "prompt": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n", "wholecode": "<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $groups = explode(\" \", $paren_string);\n    $maxDepths = array();\n\n    foreach ($groups as $group) {\n        $maxDepth = 0;\n        $currentDepth = 0;\n\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n                $currentDepth++;\n                if ($currentDepth > $maxDepth) {\n                    $maxDepth = $currentDepth;\n                }\n            } elseif ($group[$i] == ')') {\n                $currentDepth--;\n            }\n        }\n\n        array_push($maxDepths, $maxDepth);\n    }\n\n    return $maxDepths;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check() {\n    $testCases = array(\n        \"(()()) ((())) () ((())()())\" => array(2, 3, 1, 3),\n        \"(((())))\" => array(4),\n        \"()\" => array(1),\n        \"\" => array()\n    );\n\n    foreach ($testCases as $input => $expectedOutput) {\n        $output = parse_nested_parens($input);\n        if ($output !== $expectedOutput) {\n            echo \"Test failed for input '$input'. Expected \" . json_encode($expectedOutput) . \" but got \" . json_encode($output) . \".\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the parse_nested_parens function\ncheck();\n?>"}
{"task_id": "HumanEval_45_triangle_area", "generation": "<?php\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area($a, $h) {\n\n    return $a * $h / 2;\n}\n", "prompt": "<?php\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area($a, $h) {\n", "wholecode": "<?php\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area($a, $h) {\n    return $a * $h / 2;\n}\n\n// Check if a number is even.\n// >>> is_even(4)\n// true\n// >>> is_even(5)\n// false\nfunction is_even($n) {\n    return $n % 2 == 0;\n}\n\n// Given a list of numbers, return the sum of all even numbers.\n// >>> sum_even([1, 2, 3, 4, 5, 6])\n// 12\nfunction sum_even($numbers) {\n    $sum = 0;\n    foreach ($numbers as $number) {\n        if (is_even($number)) {\n            $sum += $number;\n        }\n    }\n    return $sum;\n}\n\n// Given a list of numbers, return the largest number.\n// >>> max_number([1, 2, 3, 4, 5])\n// 5\nfunction max_number($numbers) {\n    $max = $numbers[0];\n    foreach ($numbers as $number) {\n        if ($number > $max) {\n            $max = $number;\n        }\n    }\n    return $max;\n}\n\n// Given a list of strings, return a new list with all strings capitalized.\n// >>> capitalize_strings([\"hello\", \"world\"])\n// [\"HELLO\", \"WORLD\"]\nfunction capitalize_strings($strings) {\n    $capitalized = [];\n    foreach ($strings as $string) {\n        $capitalized[] = strtoupper($string);\n    }\n    return $capitalized;\n}\n\n// Given a list of numbers, return a new list with all numbers squared.\n// >>> square_numbers([1, 2, 3, 4, 5])\n// [1, 4, 9, 16, 25]\nfunction square_numbers($numbers) {\n    $squared = [];\n    foreach ($numbers as $number) {\n        $squared[] = $number * $number;\n    }\n    return $squared;\n}\n\n// Given a list of numbers, return a new list with all numbers greater than 10.\n// >>> filter_greater_than_ten([1, 2, 3, 11, 12, 13])\n// [11, 12, 13]\nfunction filter_greater_than_ten($numbers) {\n    $filtered = [];\n    foreach ($numbers as $number) {\n        if ($number > 10)"}
{"task_id": "HumanEval_97_multiply", "generation": "<?php\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply($a, $b) {\n\n    return abs($a % 10) * abs($b % 10);\n}", "prompt": "<?php\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply($a, $b) {\n", "wholecode": "<?php\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply($a, $b) {\n    return abs($a % 10) * abs($b % 10);\n}"}
{"task_id": "HumanEval_4_mean_absolute_deviation", "generation": "<?php\n// For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n\n    $mean = array_sum($numbers) / count($numbers);\n    $deviations = array_map(function($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers);\n    return array_sum($deviations) / count($deviations);\n}\n", "prompt": "<?php\n// For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n", "wholecode": "<?php\n// For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviations = array_map(function($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers);\n    return array_sum($deviations) / count($deviations);\n}\n\n// Test cases\necho mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0)) . \"\\n\"; // Output: 1.0\necho mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0, 5.0)) . \"\\n\"; // Output: 1.2\necho mean_absolute_deviation(array(1.0, 1.0, 1.0, 1.0, 1.0)) . \"\\n\"; // Output: 0.0\n?>"}
{"task_id": "HumanEval_58_common", "generation": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n\n    $result = array_intersect($l1, $l2);\n    return array_unique($result);\n}\n", "prompt": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n", "wholecode": "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $result = array_intersect($l1, $l2);\n    return array_unique($result);\n}\n\n// Main function to test the generated function\nfunction main() {\n    $testCases = array(\n        array(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121), array(1, 5, 653)),\n        array(array(5, 3, 2, 8), array(3, 2), array(2, 3)),\n    );\n\n    foreach ($testCases as $testCase) {\n        $l1 = $testCase[0];\n        $l2 = $testCase[1];\n        $expected = $testCase[2];\n        $result = common($l1, $l2);\n        assert($result === $expected, \"Failed asserting that common(\" . json_encode($l1) . \", \" . json_encode($l2) . \") equals \" . json_encode($expected));\n    }\n\n    echo \"All tests passed!\\n\";\n}\n\nmain();\n?>"}
{"task_id": "HumanEval_156_int_to_mini_roman", "generation": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n\n    $romanNumerals = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n    $roman = '';\n    foreach ($romanNumerals as $numeral => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n        }\n    }\n    return strtolower($roman);\n}\n", "prompt": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n", "wholecode": "<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $romanNumerals = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n    $roman = '';\n    foreach ($romanNumerals as $numeral => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n        }\n    }\n    return strtolower($roman);\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($testCase, $expected) {\n    $result = int_to_mini_roman($testCase);\n    if ($result === $expected) {\n        echo \"Test case {$testCase}: PASS\\n\";\n    } else {\n        echo \"Test case {$testCase}: FAIL (Expected '{$expected}', got '{$result}')\\n\";\n    }\n}\n\n// Provided data points\ncheck(19, \"xix\");\ncheck(152, \"clii\");\ncheck(426, \"cdxxvi\");\n?>"}
{"task_id": "HumanEval_67_fruit_distribution", "generation": "<?php\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution($s, $n) {\n\n    $pattern = '/(\\d+) apples and (\\d+) oranges/';\n    preg_match($pattern, $s, $matches);\n    $apples = $matches[1];\n    $oranges = $matches[2];\n    $mangoes = $n - $apples - $oranges;\n    return $mangoes;\n}", "prompt": "<?php\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution($s, $n) {\n", "wholecode": "<?php\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution($s, $n) {\n    $pattern = '/(\\d+) apples and (\\d+) oranges/';\n    preg_match($pattern, $s, $matches);\n    $apples = $matches[1];\n    $oranges = $matches[2];\n    $mangoes = $n - $apples - $oranges;\n    return $mangoes;\n}\n?>"}
{"task_id": "HumanEval_112_reverse_delete", "generation": "<?php\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\", \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n\n    $result = str_replace(str_split($c), '', $s);\n    return [$result, $result === strrev($result)];\n}", "prompt": "<?php\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\", \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n", "wholecode": "<?php\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\", \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    $result = str_replace(str_split($c), '', $s);\n    return [$result, $result === strrev($result)];\n}"}
{"task_id": "HumanEval_13_greatest_common_divisor", "generation": "<?php\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor($a, $b) {\n\n    while ($b != 0) {\n        $temp = $a % $b;\n        $a = $b;\n        $b = $temp;\n    }\n    return $a;\n}\n", "prompt": "<?php\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor($a, $b) {\n", "wholecode": "<?php\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor($a, $b) {\n    while ($b != 0) {\n        $temp = $a % $b;\n        $a = $b;\n        $b = $temp;\n    }\n    return $a;\n}\n\n// Return a least common multiple of two integers a and b\n// >>> least_common_multiple(4, 6)\n// 12\n// >>> least_common_multiple(21, 6)\n// 42\nfunction least_common_multiple($a, $b) {\n    return ($a * $b) / greatest_common_divisor($a, $b);\n}\n\n// Return a list of prime numbers up to n\n// >>> prime_numbers(10)\n// [2, 3, 5, 7]\n// >>> prime_numbers(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\nfunction prime_numbers($n) {\n    $primes = [];\n    for ($i = 2; $i <= $n; $i++) {\n        if (is_prime($i)) {\n            $primes[] = $i;\n        }\n    }\n    return $primes;\n}\n\n// Check if a number is prime\nfunction is_prime($n) {\n    if ($n <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Return a list of prime factors of a number n\n// >>> prime_factors(12)\n// [2, 2, 3]\n// >>> prime_factors(28)\n// [2, 2, 7]\nfunction prime_factors($n) {\n    $factors = [];\n    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n        }\n        $d++;\n    }\n    return $factors;\n}\n\n// Return a list of divisors of a number n\n// >>> divisors(12)\n// [1, 2, 3, 4, 6, 12]\n// >>> divisors(28)\n// [1, 2, 4, "}
{"task_id": "HumanEval_125_split_words", "generation": "<?php\n// Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words($txt) {\n\n    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ctype_lower($txt[$i]) && ($i % 2 == 1)) {\n                $count++;\n            }\n        }\n        return $count;\n    }\n}", "prompt": "<?php\n// Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words($txt) {\n", "wholecode": "<?php\n// Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ctype_lower($txt[$i]) && ($i % 2 == 1)) {\n                $count++;\n            }\n        }\n        return $count;\n    }\n}"}
{"task_id": "HumanEval_116_sort_array", "generation": "<?php\n// In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr) {\n\n    $arr = array_map(function($item) {\n        return array($item, decbin($item));\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = substr_count($a, '1');\n        $b = substr_count($b, '1');\n        if ($a == $b) {\n            return $a[0] - $b[0];\n        }\n        return $a - $b;\n    });\n    return array_map(function($item) {\n        return $item[0];\n    }, $arr);\n}", "prompt": "<?php\n// In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr) {\n", "wholecode": "<?php\n// In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr) {\n    $arr = array_map(function($item) {\n        return array($item, decbin($item));\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = substr_count($a, '1');\n        $b = substr_count($b, '1');\n        if ($a == $b) {\n            return $a[0] - $b[0];\n        }\n        return $a - $b;\n    });\n    return array_map(function($item) {\n        return $item[0];\n    }, $arr);\n}"}
{"task_id": "HumanEval_28_concatenate", "generation": "<?php\n// Concatenate array of strings into a single string\n// >>> concatenate(array())\n// \"\"\n// >>> concatenate(array(\"a\", \"b\", \"c\"))\n// \"abc\"\nfunction concatenate($strings) {\n\n    return implode('', $strings);\n}\n", "prompt": "<?php\n// Concatenate array of strings into a single string\n// >>> concatenate(array())\n// \"\"\n// >>> concatenate(array(\"a\", \"b\", \"c\"))\n// \"abc\"\nfunction concatenate($strings) {\n", "wholecode": "<?php\n// Concatenate array of strings into a single string\n// >>> concatenate(array())\n// \"\"\n// >>> concatenate(array(\"a\", \"b\", \"c\"))\n// \"abc\"\nfunction concatenate($strings) {\n    return implode('', $strings);\n}\n\n// Check if a string is a palindrome\n// >>> isPalindrome(\"racecar\")\n// true\n// >>> isPalindrome(\"hello\")\n// false\nfunction isPalindrome($str) {\n    return $str === strrev($str);\n}\n\n// Find the longest common prefix among an array of strings\n// >>> longestCommonPrefix(array(\"flower\", \"flow\", \"flight\"))\n// \"fl\"\n// >>> longestCommonPrefix(array(\"dog\", \"racecar\", \"car\"))\n// \"\"\nfunction longestCommonPrefix($strings) {\n    if (empty($strings)) {\n        return \"\";\n    }\n    $prefix = $strings[0];\n    for ($i = 1; $i < count($strings); $i++) {\n        while (strpos($strings[$i], $prefix) !== 0) {\n            $prefix = substr($prefix, 0, -1);\n            if ($prefix === \"\") {\n                return \"\";\n            }\n        }\n    }\n    return $prefix;\n}\n\n// Main function to test the generated functions\nfunction main() {\n    assert(concatenate(array()) === \"\");\n    assert(concatenate(array(\"a\", \"b\", \"c\")) === \"abc\");\n    assert(isPalindrome(\"racecar\") === true);\n    assert(isPalindrome(\"hello\") === false);\n    assert(longestCommonPrefix(array(\"flower\", \"flow\", \"flight\")) === \"fl\");\n    assert(longestCommonPrefix(array(\"dog\", \"racecar\", \"car\")) === \"\");\n    echo \"All tests passed.\\n\";\n}\n\nmain();\n?>"}
{"task_id": "HumanEval_149_sorted_list_sum", "generation": "<?php\n// Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\", \"cd\")\nfunction sorted_list_sum($lst) {\n\n    $result = array();\n    foreach ($lst as $value) {\n        if (strlen($value) % 2 == 0) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}", "prompt": "<?php\n// Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\", \"cd\")\nfunction sorted_list_sum($lst) {\n", "wholecode": "<?php\n// Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\", \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach ($lst as $value) {\n        if (strlen($value) % 2 == 0) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n?>"}
{"task_id": "HumanEval_7_filter_by_substring", "generation": "<?php\n// Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring(array(), \"a\")\n// array()\n// >>> filter_by_substring(array(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"bacd\", \"array\")\nfunction filter_by_substring($strings, $substring) {\n\n    $result = array();\n    foreach ($strings as $string) {\n        if (strpos($string, $substring) !== false) {\n            $result[] = $string;\n        }\n    }\n    return $result;\n}\n", "prompt": "<?php\n// Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring(array(), \"a\")\n// array()\n// >>> filter_by_substring(array(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"bacd\", \"array\")\nfunction filter_by_substring($strings, $substring) {\n", "wholecode": "<?php\n// Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring(array(), \"a\")\n// array()\n// >>> filter_by_substring(array(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"bacd\", \"array\")\nfunction filter_by_substring($strings, $substring) {\n    $result = array();\n    foreach ($strings as $string) {\n        if (strpos($string, $substring) !== false) {\n            $result[] = $string;\n        }\n    }\n    return $result;\n}\n\n// Check function to verify the correctness of the filter_by_substring function\nfunction check() {\n    $testCases = array(\n        array(\"input\" => array(), \"substring\" => \"a\", \"expected\" => array()),\n        array(\"input\" => array(\"abc\", \"bacd\", \"cde\", \"array\"), \"substring\" => \"a\", \"expected\" => array(\"abc\", \"bacd\", \"array\")),\n        array(\"input\" => array(\"hello\", \"world\", \"php\", \"code\"), \"substring\" => \"o\", \"expected\" => array(\"hello\", \"world\", \"code\")),\n    );\n\n    foreach ($testCases as $testCase) {\n        $output = filter_by_substring($testCase[\"input\"], $testCase[\"substring\"]);\n        if ($output === $testCase[\"expected\"]) {\n            echo \"Test passed for input: \" . implode(\", \", $testCase[\"input\"]) . \"\\n\";\n        } else {\n            echo \"Test failed for input: \" . implode(\", \", $testCase[\"input\"]) . \"\\n\";\n        }\n    }\n}\n\n// Run the check function to verify the correctness of the filter_by_substring function\ncheck();\n?>"}
{"task_id": "HumanEval_99_closest_integer", "generation": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n\n    $number = floatval($value);\n    $integer = intval($number);\n    $fraction = $number - $integer;\n    if ($fraction == 0.5) {\n        return $integer + ($integer > 0 ? 1 : -1);\n    } else {\n        return round($number);\n    }\n}", "prompt": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n", "wholecode": "<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    $number = floatval($value);\n    $integer = intval($number);\n    $fraction = $number - $integer;\n    if ($fraction == 0.5) {\n        return $integer + ($integer > 0 ? 1 : -1);\n    } else {\n        return round($number);\n    }\n}\n?>"}
{"task_id": "HumanEval_64_vowels_count", "generation": "<?php\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count($s) {\n\n    $vowels = array('a', 'e', 'i', 'o', 'u', 'y');\n    $count = 0;\n    $s = strtolower($s);\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (in_array($s[$i], $vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n", "prompt": "<?php\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count($s) {\n", "wholecode": "<?php\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count($s) {\n    $vowels = array('a', 'e', 'i', 'o', 'u', 'y');\n    $count = 0;\n    $s = strtolower($s);\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (in_array($s[$i], $vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n// Write a function is_palindrome which takes a string as input and\n// returns true if the string is a palindrome, false otherwise.\n// A palindrome is a word that is the same forwards and backwards.\n// Example:\n// >>> is_palindrome(\"racecar\")\n// true\n// >>> is_palindrome(\"hello\")\n// false\nfunction is_palindrome($s) {\n    $s = strtolower($s);\n    $s = str_replace(' ', '', $s);\n    $s = str_replace(',', '', $s);\n    $s = str_replace('.', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('?', '', $s);\n    $s = str_replace(';', '', $s);\n    $s = str_replace(':', '', $s);\n    $s = str_replace('\"', '', $s);\n    $s = str_replace(\"'\", '', $s);\n    $s = str_replace('(', '', $s);\n    $s = str_replace(')', '', $s);\n    $s = str_replace('[', '', $s);\n    $s = str_replace(']', '', $s);\n    $s = str_replace('{', '', $s);\n    $s = str_replace('}', '', $s);\n    $s = str_replace('<', '', $s);\n    $s = str_replace('>', '', $s);\n    $s = str_replace('/', '', $s);\n    $s = str_replace('\\\\', '', $s);\n    $s = str_replace('|', '', $s);\n    $s = str_replace('`', '', $s);\n    $s = str_replace('~', '', $s);\n    $s = str_replace('!', '', $s);\n    $s = str_replace('@', '', $s);\n    $s = str_replace('#', '', $s);\n    $s = str_replace('$', '', $s);\n    $s = str_replace('%', '', $s);\n    $s = str"}
{"task_id": "HumanEval_158_find_max", "generation": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n        $unique_chars = count_chars($word, 3);\n        if (count($unique_chars) > $max) {\n            $max = count($unique_chars);\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\necho find_max(array(\"name\", \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\", \"game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\n\";", "prompt": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n", "wholecode": "<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n        $unique_chars = count_chars($word, 3);\n        if (count($unique_chars) > $max) {\n            $max = count($unique_chars);\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\necho find_max(array(\"name\", \"of\", \"string\")) . \"\\n\";\necho find_max(array(\"name\", \"enam\", \"game\")) . \"\\n\";\necho find_max(array(\"aaaaaaa\", \"bb\", \"cc\")) . \"\\n\";"}
{"task_id": "HumanEval_162_string_to_md5", "generation": "<?php\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return null.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5($text) {\n\n    if (empty($text)) {\n        return null;\n    }\n    return md5($text);\n}\n", "prompt": "<?php\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return null.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5($text) {\n", "wholecode": "<?php\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return null.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5($text) {\n    if (empty($text)) {\n        return null;\n    }\n    return md5($text);\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($function, $testCases) {\n    foreach ($testCases as $input => $expected) {\n        $result = $function($input);\n        if ($result !== $expected) {\n            echo \"Test failed for input '$input'. Expected '$expected', got '$result'.\\n\";\n            return false;\n        }\n    }\n    echo \"All tests passed.\\n\";\n    return true;\n}\n\n// Provided data points to verify the correctness\n$testCases = [\n    \"Hello world\" => \"3e25960a79dbc69b674cd4ec67a72c62\",\n    \"\" => null,\n    \"PHP is fun!\" => \"b5e4b79297c68a412e63959731b9344b\"\n];\n\ncheck('string_to_md5', $testCases);\n?>"}
{"task_id": "HumanEval_44_change_base", "generation": "<?php\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base($x, $base) {\n\n    $result = \"\";\n    while ($x > 0) {\n        $result = strval($x % $base) . $result;\n        $x = intdiv($x, $base);\n    }\n    return $result;\n}\n", "prompt": "<?php\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base($x, $base) {\n", "wholecode": "<?php\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base($x, $base) {\n    $result = \"\";\n    while ($x > 0) {\n        $result = strval($x % $base) . $result;\n        $x = intdiv($x, $base);\n    }\n    return $result;\n}\n\n// Check if a number is a palindrome.\n// >>> is_palindrome(121)\n// True\n// >>> is_palindrome(-121)\n// False\n// >>> is_palindrome(10)\n// False\nfunction is_palindrome($x) {\n    $str = strval($x);\n    $length = strlen($str);\n    for ($i = 0; $i < $length / 2; $i++) {\n        if ($str[$i] !== $str[$length - $i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Check if a number is a palindrome in a given base.\n// >>> is_palindrome_in_base(8, 3)\n// True\n// >>> is_palindrome_in_base(8, 2)\n// False\n// >>> is_palindrome_in_base(7, 2)\n// True\nfunction is_palindrome_in_base($x, $base) {\n    return is_palindrome(change_base($x, $base));\n}\n\n// Main function to test the generated functions.\nfunction main() {\n    echo is_palindrome_in_base(8, 3) ? \"True\\n\" : \"False\\n\";  // Output: True\n    echo is_palindrome_in_base(8, 2) ? \"True\\n\" : \"False\\n\";  // Output: False\n    echo is_palindrome_in_base(7, 2) ? \"True\\n\" : \"False\\n\";  // Output: True\n}\n\nmain();\n?>"}
{"task_id": "HumanEval_157_right_angle_triangle", "generation": "<?php\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle($a, $b, $c) {\n\n    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "prompt": "<?php\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle($a, $b, $c) {\n", "wholecode": "<?php\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle($a, $b, $c) {\n    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n\n// Check function to verify the correctness of the generated function\nfunction check($a, $b, $c, $expected) {\n    $result = right_angle_triangle($a, $b, $c);\n    if ($result === $expected) {\n        echo \"Test passed: right_angle_triangle($a, $b, $c) returns $result\\n\";\n    } else {\n        echo \"Test failed: right_angle_triangle($a, $b, $c) returns $result, expected $expected\\n\";\n    }\n}\n\n// Provided data points\ncheck(3, 4, 5, true); // true\ncheck(1, 2, 3, false); // false\ncheck(5, 12, 13, true); // true\ncheck(10, 6, 8, true); // true\ncheck(7, 24, 25, true); // true\ncheck(2, 2, 2, false); // false\n?>"}
{"task_id": "HumanEval_81_numerical_letter_grade", "generation": "<?php\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n// array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades) {\n\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n            $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[] = \"E\";\n        }\n    }\n    return $letter_grades;\n}", "prompt": "<?php\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n// array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades) {\n", "wholecode": "<?php\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n// array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades) {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n            $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[] = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n?>"}
{"task_id": "HumanEval_5_intersperse", "generation": "<?php\n// Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse(array(), 4)\n// array()\n// >>> intersperse(array(1, 2, 3), 4)\n// array(1, 4, 2, 4, 3)\nfunction intersperse($numbers, $delimeter) {\n\n    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = $number;\n        $result[] = $delimeter;\n    }\n    array_pop($result);\n    return $result;\n}\n", "prompt": "<?php\n// Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse(array(), 4)\n// array()\n// >>> intersperse(array(1, 2, 3), 4)\n// array(1, 4, 2, 4, 3)\nfunction intersperse($numbers, $delimeter) {\n", "wholecode": "<?php\n// Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse(array(), 4)\n// array()\n// >>> intersperse(array(1, 2, 3), 4)\n// array(1, 4, 2, 4, 3)\nfunction intersperse($numbers, $delimeter) {\n    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = $number;\n        $result[] = $delimeter;\n    }\n    array_pop($result);\n    return $result;\n}\n\n// Check if a given string is a palindrome\n// >>> isPalindrome(\"racecar\")\n// true\n// >>> isPalindrome(\"hello\")\n// false\nfunction isPalindrome($str) {\n    return $str === strrev($str);\n}\n\n// Find the maximum element in an array\n// >>> findMax(array(1, 2, 3, 4, 5))\n// 5\n// >>> findMax(array(-5, -2, -3, -1))\n// -1\nfunction findMax($arr) {\n    return max($arr);\n}\n\n// Check if a given number is a prime number\n// >>> isPrime(7)\n// true\n// >>> isPrime(8)\n// false\nfunction isPrime($num) {\n    if ($num <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($num); $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Find the intersection of two arrays\n// >>> arrayIntersection(array(1, 2, 3), array(2, 3, 4))\n// array(2, 3)\n// >>> arrayIntersection(array(1, 2, 3), array(4, 5, 6))\n// array()\nfunction arrayIntersection($arr1, $arr2) {\n    return array_values(array_intersect($arr1, $arr2));\n}\n\n// Check if a given string is a valid email address\n// >>> isValidEmail(\"test@example.com\")\n// true\n// >>> isValidEmail(\"invalid-email\")\n// false\nfunction isValidEmail($email) {\n    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n}\n\n// Find the sum of all elements in an array\n// >>> arraySum(array(1, 2, 3, 4, 5))\n// 15\n// >>> arraySum(array(-1, -2, -3, -4, -5))\n// -15\nfunction arraySum($arr) {\n    return array_sum($arr);\n}\n\n// Check if a given string is a valid URL\n// >>>"}
{"task_id": "HumanEval_146_specialFilter", "generation": "<?php\n// Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter(array(15, -73, 14, -15))\n// 1\n// >>> specialFilter(array(33, -2, -3, 45, 21, 109))\n// 2\nfunction specialFilter($nums) {\n\n    $count = 0;\n    foreach ($nums as $num) {\n        if ($num > 10 && $num % 2 != 0) {\n            $firstDigit = (int)strval($num)[0];\n            $lastDigit = (int)strval($num)[-1];\n            if ($firstDigit % 2 != 0 && $lastDigit % 2 != 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}", "prompt": "<?php\n// Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter(array(15, -73, 14, -15))\n// 1\n// >>> specialFilter(array(33, -2, -3, 45, 21, 109))\n// 2\nfunction specialFilter($nums) {\n", "wholecode": "<?php\n// Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter(array(15, -73, 14, -15))\n// 1\n// >>> specialFilter(array(33, -2, -3, 45, 21, 109))\n// 2\nfunction specialFilter($nums) {\n    $count = 0;\n    foreach ($nums as $num) {\n        if ($num > 10 && $num % 2 != 0) {\n            $firstDigit = (int)strval($num)[0];\n            $lastDigit = (int)strval($num)[-1];\n            if ($firstDigit % 2 != 0 && $lastDigit % 2 != 0) {\n                $count++;\n            }\n        }\n    }\n    return $count;\n}\n?>"}
{"task_id": "HumanEval_60_sum_to_n", "generation": "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n) {\n\n    // Your code here\n}\n", "prompt": "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n) {\n", "wholecode": "<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n) {\n    // Your code here\n}\n\n// Test cases\necho sum_to_n(30) . \"\\n\"; // 465\necho sum_to_n(100) . \"\\n\"; // 5050\necho sum_to_n(5) . \"\\n\"; // 15\necho sum_to_n(10) . \"\\n\"; // 55\necho sum_to_n(1) . \"\\n\"; // 1\n?>"}
{"task_id": "HumanEval_26_remove_duplicates", "generation": "<?php\n// From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers) {\n\n    $unique_numbers = array_unique($numbers);\n    return $unique_numbers;\n}\n", "prompt": "<?php\n// From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers) {\n", "wholecode": "<?php\n// From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers) {\n    $unique_numbers = array_unique($numbers);\n    return $unique_numbers;\n}\n\n// Check function to verify the correctness of the remove_duplicates function\nfunction check() {\n    $test_cases = array(\n        array(1, 2, 3, 2, 4) => array(1, 3, 4),\n        array(5, 5, 6, 6, 7) => array(5, 6, 7),\n        array(8, 9, 10, 9, 8) => array(8, 9, 10),\n        array(11, 12, 13, 14, 15) => array(11, 12, 13, 14, 15),\n    );\n\n    foreach ($test_cases as $input => $expected_output) {\n        $output = remove_duplicates($input);\n        if ($output !== $expected_output) {\n            echo \"Test failed for input \" . implode(\", \", $input) . \". Expected \" . implode(\", \", $expected_output) . \" but got \" . implode(\", \", $output) . \".\\n\";\n            return;\n        }\n    }\n    echo \"All tests passed!\\n\";\n}\n\n// Run the check function to verify the correctness of the remove_duplicates function\ncheck();\n?>"}
{"task_id": "HumanEval_163_generate_integers", "generation": "<?php\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// array(2, 4, 6, 8)\n// >>> generate_integers(8, 2)\n// array(2, 4, 6, 8)\n// >>> generate_integers(10, 14)\n// array()\nfunction generate_integers($a, $b) {\n\n    $result = array();\n    $start = min($a, $b);\n    $end = max($a, $b);\n    for ($i = $start; $i <= $end; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}", "prompt": "<?php\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// array(2, 4, 6, 8)\n// >>> generate_integers(8, 2)\n// array(2, 4, 6, 8)\n// >>> generate_integers(10, 14)\n// array()\nfunction generate_integers($a, $b) {\n", "wholecode": "<?php\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// array(2, 4, 6, 8)\n// >>> generate_integers(8, 2)\n// array(2, 4, 6, 8)\n// >>> generate_integers(10, 14)\n// array()\nfunction generate_integers($a, $b) {\n    $result = array();\n    $start = min($a, $b);\n    $end = max($a, $b);\n    for ($i = $start; $i <= $end; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n?>"}
{"task_id": "HumanEval_9_rolling_max", "generation": "<?php\n// From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max(array(1, 2, 3, 2, 3, 4, 2))\n// array(1, 2, 3, 3, 3, 4, 4)\nfunction rolling_max($numbers) {\n\n    $max = $numbers[0];\n    $result = array($max);\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "prompt": "<?php\n// From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max(array(1, 2, 3, 2, 3, 4, 2))\n// array(1, 2, 3, 3, 3, 4, 4)\nfunction rolling_max($numbers) {\n", "wholecode": "<?php\n// From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max(array(1, 2, 3, 2, 3, 4, 2))\n// array(1, 2, 3, 3, 3, 4, 4)\nfunction rolling_max($numbers) {\n    $max = $numbers[0];\n    $result = array($max);\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n        $result[] = $max;\n    }\n    return $result;\n}\n\n// Check if a given string is a palindrome.\n// >>> is_palindrome(\"racecar\")\n// true\n// >>> is_palindrome(\"hello\")\n// false\nfunction is_palindrome($str) {\n    $str = strtolower($str);\n    $str = preg_replace(\"/[^A-Za-z0-9]/\", '', $str);\n    return $str == strrev($str);\n}\n\n// Given a list of integers, find the highest product you can get from three of the integers.\n// >>> highest_product_of_three(array(1, 2, 3, 4))\n// 24\n// >>> highest_product_of_three(array(-10, -10, 1, 3, 2))\n// 300\nfunction highest_product_of_three($numbers) {\n    sort($numbers);\n    $n = count($numbers);\n    return max($numbers[0] * $numbers[1] * $numbers[$n-1], $numbers[$n-1] * $numbers[$n-2] * $numbers[$n-3]);\n}\n\n// Given a list of integers, find the highest product you can get from two of the integers.\n// >>> highest_product_of_two(array(1, 2, 3, 4))\n// 12\n// >>> highest_product_of_two(array(-10, -10, 1, 3, 2))\n// 100\nfunction highest_product_of_two($numbers) {\n    sort($numbers);\n    $n = count($numbers);\n    return max($numbers[0] * $numbers[1], $numbers[$n-1] * $numbers[$n-2]);\n}\n\n// Given a list of integers, find the highest product you can get from two of the integers.\n// >>> highest_product_of_two(array(1, 2, 3, 4))\n// 12\n// >>> highest_product_of_two(array(-10, -10, 1, 3, 2))\n// 100\nfunction highest_product"}
{"task_id": "HumanEval_3_below_zero", "generation": "<?php\n// You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero(array(1, 2, 3))\n// false\n// >>> below_zero(array(1, 2, -4, 5))\n// true\nfunction below_zero($operations) {\n\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "prompt": "<?php\n// You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero(array(1, 2, 3))\n// false\n// >>> below_zero(array(1, 2, -4, 5))\n// true\nfunction below_zero($operations) {\n", "wholecode": "<?php\n// You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero(array(1, 2, 3))\n// false\n// >>> below_zero(array(1, 2, -4, 5))\n// true\nfunction below_zero($operations) {\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Test cases\necho below_zero(array(1, 2, 3)) ? 'true' : 'false'; // false\necho \"\\n\";\necho below_zero(array(1, 2, -4, 5)) ? 'true' : 'false'; // true\necho \"\\n\";\necho below_zero(array(1, 2, -3, 4, -5)) ? 'true' : 'false'; // true\necho \"\\n\";\necho below_zero(array(1, 2, -1, 3, -2)) ? 'true' : 'false'; // false\necho \"\\n\";\necho below_zero(array(1, 2, -3, 4, -5, 6)) ? 'true' : 'false'; // true\necho \"\\n\";\necho below_zero(array(1, 2, -3, 4, -5, 6, -7)) ? 'true' : 'false'; // true\necho \"\\n\";\necho below_zero(array(1, 2, -3, 4, -5, 6, -7, 8)) ? 'true' : 'false'; // false\necho \"\\n\";\necho below_zero(array(1, 2, -3, 4, -5, 6, -7, 8, -9)) ? 'true' : 'false'; // true\necho \"\\n\";\necho below_zero(array(1, 2, -3, 4, -5, 6, -7, 8, -9, 10)) ? 'true' : 'false'; // false\necho \"\\n\";\necho below_zero(array(1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11)) ? 'true' : 'false'; // true\necho \"\\n\";\necho below_zero(array(1, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, 12)) ? 'true' : 'false'; // false\n"}
{"task_id": "HumanEval_69_search", "generation": "<?php\n// You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search(array(4, 1, 2, 2, 3, 1))\n// 2\n// >>> search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))\n// 3\n// >>> search(array(5, 5, 4, 4, 4))\n// -1\nfunction search($lst) {\n\n    $count = array_count_values($lst);\n    foreach ($count as $key => $value) {\n        if ($key <= $value) {\n            return $key;\n        }\n    }\n    return -1;\n}", "prompt": "<?php\n// You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search(array(4, 1, 2, 2, 3, 1))\n// 2\n// >>> search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))\n// 3\n// >>> search(array(5, 5, 4, 4, 4))\n// -1\nfunction search($lst) {\n", "wholecode": "<?php\n// You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search(array(4, 1, 2, 2, 3, 1))\n// 2\n// >>> search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))\n// 3\n// >>> search(array(5, 5, 4, 4, 4))\n// -1\nfunction search($lst) {\n    $count = array_count_values($lst);\n    foreach ($count as $key => $value) {\n        if ($key <= $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n?>"}
{"task_id": "HumanEval_61_correct_bracketing", "generation": "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets) {\n\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n            array_push($stack, \"(\");\n        } else if ($brackets[$i] == \")\") {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n", "prompt": "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets) {\n", "wholecode": "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets) {\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n            array_push($stack, \"(\");\n        } else if ($brackets[$i] == \")\") {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n\n// Main function to test the generated function\nfunction main() {\n    $testCases = array(\n        \"(()())\" => true,\n        \"(()\" => false,\n        \")(\" => false,\n        \"()\" => true,\n        \"((()))\" => true,\n        \"(()))(\" => false\n    );\n\n    foreach ($testCases as $input => $expected) {\n        $result = correct_bracketing($input);\n        echo \"correct_bracketing(\\\"$input\\\") = \" . ($result ? \"true\" : \"false\") . \"\\n\";\n        assert($result === $expected);\n    }\n}\n\nmain();\n?>"}
{"task_id": "HumanEval_37_sort_even", "generation": "<?php\n// This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even(array(1, 2, 3))\n// array(1, 2, 3)\n// >>> sort_even(array(5, 6, 3, 4))\n// array(3, 6, 5, 4)\nfunction sort_even($l) {\n\n    $even = array();\n    $odd = array();\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n            $even[] = $v;\n        } else {\n            $odd[] = $v;\n        }\n    }\n    sort($even);\n    $result = array();\n    $even_i = 0;\n    $odd_i = 0;\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n            $result[] = $even[$even_i++];\n        } else {\n            $result[] = $odd[$odd_i++];\n        }\n    }\n    return $result;\n}\n", "prompt": "<?php\n// This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even(array(1, 2, 3))\n// array(1, 2, 3)\n// >>> sort_even(array(5, 6, 3, 4))\n// array(3, 6, 5, 4)\nfunction sort_even($l) {\n", "wholecode": "<?php\n// This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even(array(1, 2, 3))\n// array(1, 2, 3)\n// >>> sort_even(array(5, 6, 3, 4))\n// array(3, 6, 5, 4)\nfunction sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n            $even[] = $v;\n        } else {\n            $odd[] = $v;\n        }\n    }\n    sort($even);\n    $result = array();\n    $even_i = 0;\n    $odd_i = 0;\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n            $result[] = $even[$even_i++];\n        } else {\n            $result[] = $odd[$odd_i++];\n        }\n    }\n    return $result;\n}\n\n// Main function to test the generated function\nfunction main() {\n    $test_cases = array(\n        array(1, 2, 3),\n        array(5, 6, 3, 4),\n        array(4, 1, 2, 3, 6),\n        array(),\n        array(10),\n        array(8, 7, 6, 5, 4, 3, 2, 1)\n    );\n    \n    foreach ($test_cases as $test_case) {\n        $sorted_array = sort_even($test_case);\n        echo \"Original array: \" . implode(\", \", $test_case) . \"\\n\";\n        echo \"Sorted array: \" . implode(\", \", $sorted_array) . \"\\n\";\n    }\n}\n\nmain();\n?>"}
{"task_id": "HumanEval_54_same_chars", "generation": "<?php\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars($s0, $s1) {\n\n    $chars0 = count_chars($s0, 1);\n    $chars1 = count_chars($s1, 1);\n    return $chars0 == $chars1;\n}\n", "prompt": "<?php\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars($s0, $s1) {\n", "wholecode": "<?php\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars($s0, $s1) {\n    $chars0 = count_chars($s0, 1);\n    $chars1 = count_chars($s1, 1);\n    return $chars0 == $chars1;\n}\n\n// Check if a string is a palindrome.\n// >>> is_palindrome(\"racecar\")\n// true\n// >>> is_palindrome(\"noon\")\n// true\n// >>> is_palindrome(\"abba\")\n// true\n// >>> is_palindrome(\"a\")\n// true\n// >>> is_palindrome(\"ab\")\n// false\n// >>> is_palindrome(\"abc\")\n// false\nfunction is_palindrome($s) {\n    return $s === strrev($s);\n}\n\n// Check if a string is a pangram.\n// >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n// true\n// >>> is_pangram(\"The quick brown fox jumps over the dog\")\n// false\n// >>> is_pangram(\"Sphinx of black quartz, judge my vow\")\n// true\n// >>> is_pangram(\"The five boxing wizards jump quickly\")\n// true\n// >>> is_pangram(\"Not a pangram\")\n// false\nfunction is_pangram($s) {\n    $s = strtolower($s);\n    $s = preg_replace('/[^a-z]/', '', $s);\n    return strlen($s) == 26;\n}\n\n// Check if a string is a valid email address.\n// >>> is_valid_email(\"test@example.com\")\n// true\n// >>> is_valid_email(\"test.example.com\")\n// false\n// >>> is_valid_email(\"test@example\")\n// false\n// >>> is_valid_email(\"test@example.com\")\n// true\n// >>> is_valid_email(\"test@example.com\")\n// true\n// >>> is_valid_email(\"test@example.com\")\n// true\nfunction is_valid_email($s) {\n    return filter_var($s, FILTER_VALIDATE_EMAIL) !== false;\n}\n\n// Check if a string is a valid URL.\n// >>> is_valid_url(\"http://www.example.com\")\n// true\n// >>> is_valid_url(\"https://www.example.com\")\n// true\n// >>> is_valid_url(\"ftp://www.example.com\")\n// true\n// >>> is_valid_url(\"www.example.com\")\n// false\n// >>> is_valid_url(\"http://www.example\")\n// false\n// >>> is_valid_url(\"http://www.example.com/path\")\n// true\nfunction is_valid_url($s) {\n    return"}
{"task_id": "HumanEval_56_correct_bracketing", "generation": "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets) {\n\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n            array_push($stack, $brackets[$i]);\n        } else if ($brackets[$i] == \">\") {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n", "prompt": "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets) {\n", "wholecode": "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets) {\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n            array_push($stack, $brackets[$i]);\n        } else if ($brackets[$i] == \">\") {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n\n// The code below is used to test the function and ensure it is working correctly\nfunction test() {\n    $test_cases = array(\n        \"<\" => false,\n        \"<>\" => true,\n        \"<<><>>\" => true,\n        \"><<>\"=> false\n    );\n    foreach ($test_cases as $input => $expected) {\n        $result = correct_bracketing($input);\n        if ($result === $expected) {\n            echo \"Test passed for input $input\\n\";\n        } else {\n            echo \"Test failed for input $input\\n\";\n        }\n    }\n}\n\ntest();\n?>"}
